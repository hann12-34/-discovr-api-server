const { getCityFromArgs } = require('../../utils/city-util.js');
/**
 * NYC Professional Development Events Scraper
 * 
 * Scrapes professional development and career events from NYC corporate venues, training centers, and business locations
 * URL: https://www.eventbrite.com/d/ny--new-york/business-professional/
 */

const axios = require('axios');
const cheerio = require('cheerio');

class NYCProfessionalDevelopmentEvents {
    constructor() {
        this.venueName = 'NYC Professional Development Events';
        this.venueLocation = 'Various NYC Corporate Venues, Training Centers & Business Locations';
        this.baseUrl = 'https://www.eventbrite.com';
        this.eventsUrl = 'https://www.eventbrite.com/d/ny--new-york/business-professional/';
        this.category = 'Professional Development';
    }

    /**
     * Scrape events from NYC Professional Development Events
     * @returns {Promise<Array>} Array of event objects
     */
    async scrape() {
        console.log(`💼 Scraping events from ${this.venueName}...`);
        
        try {
            const response = await axios.get(this.eventsUrl, {
                headers: {
                    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
                    'Accept-Language': 'en-US,en;q=0.9',
                    'Accept-Encoding': 'gzip, deflate, br',
                    'Cache-Control': 'max-age=0',
                    'sec-ch-ua': '"Not_A Brand";v="8", "Chromium";v="120", "Google Chrome";v="120"',
                    'sec-ch-ua-mobile': '?0',
                    'sec-ch-ua-platform': '"macOS"',
                    'sec-fetch-dest': 'document',
                    'sec-fetch-mode': 'navigate',
                    'sec-fetch-site': 'none',
                    'sec-fetch-user': '?1',
                    'upgrade-insecure-requests': '1',
                    'Referer': 'https://www.google.com/',
                    'DNT': '1',
                    'Connection': 'keep-alive'
                },
                timeout: 15000
            });

            const $ = cheerio.load(response.data);
            const events = [];

            // Look for professional development-specific event containers
            const eventSelectors = [
                '.professional-event', '.business-event', '.career-event',
                '.event-item', '.event-card', '.event', '.training-event',
                '[class*="professional"]', '[class*="business"]', '[class*="event"]',
                '.card', '.content-card', '.workshop-event', '.seminar-event'
            ];

            eventSelectors.forEach(selector => {
                $(selector).each((index, element) => {
                    const $el = $(element);
                    let title = $el.find('h1, h2, h3, h4, .title, .event-title, .training-title, .name, .headline').first().text().trim();
                    
                    if (!title) {
                        const textContent = $el.text().trim();
                        const lines = textContent.split('\n').filter(line => line.trim().length > 0);
                        title = lines[0]?.trim() || '';
                    }

                    if (title && this.isValidEvent(title)) {
                        // Look for event date/time
                        let dateTime = '';
                        const dateSelectors = [
                            '.date', '.datetime', '[class*="date"]', 
                            'time', '.when', '.schedule', '.event-time', '.training-time'
                        ];
                        
                        for (const dateSelector of dateSelectors) {
                            const dateElement = $el.find(dateSelector).first();
                            if (dateElement.length > 0) {
                                dateTime = dateElement.text().trim();
                                if (dateTime && dateTime.length < 150) break;
                            }
                        }

                        // Look for venue/corporate location
                        let venue = this.venueLocation;
                        const venueSelectors = ['.venue', '.location', '.office', '[class*="venue"]', '.corporate', '.training-center'];
                        for (const venueSelector of venueSelectors) {
                            const venueElement = $el.find(venueSelector).first();
                            if (venueElement.length > 0) {
                                const venueText = venueElement.text().trim();
                                if (venueText && venueText.length > 0) {
                                    venue = venueText.length > 70 ? venueText.substring(0, 70) + '...' : venueText;
                                    break;
                                }
                            }
                        }

                        // Look for skill/topic area
                        let skillArea = this.category;
                        const skillSelectors = ['.skill', '.topic', '.subject', '[class*="skill"]'];
                        for (const skillSelector of skillSelectors) {
                            const skillElement = $el.find(skillSelector).first();
                            if (skillElement.length > 0) {
                                const skillText = skillElement.text().trim();
                                if (skillText && skillText.length > 0) {
                                    skillArea = skillText;
                                    break;
                                }
                            }
                        }

                        // Look for instructor/trainer
                        let instructor = '';
                        const instructorSelectors = ['.instructor', '.trainer', '.speaker', '[class*="instructor"]'];
                        for (const instructorSelector of instructorSelectors) {
                            const instructorElement = $el.find(instructorSelector).first();
                            if (instructorElement.length > 0) {
                                instructor = instructorElement.text().trim();
                                if (instructor) break;
                            }
                        }

                        // Look for company/organization
                        let company = '';
                        const companySelectors = ['.company', '.organization', '.employer', '[class*="company"]'];
                        for (const companySelector of companySelectors) {
                            const companyElement = $el.find(companySelector).first();
                            if (companyElement.length > 0) {
                                company = companyElement.text().trim();
                                if (company) break;
                            }
                        }

                        // Look for experience level
                        let experienceLevel = '';
                        const levelSelectors = ['.level', '.experience', '.career-level', '[class*="level"]'];
                        for (const levelSelector of levelSelectors) {
                            const levelElement = $el.find(levelSelector).first();
                            if (levelElement.length > 0) {
                                const levelText = levelElement.text().trim();
                                if (levelText && levelText.match(/\b(entry|junior|senior|executive|all levels|beginner|intermediate|advanced)\b/i)) {
                                    experienceLevel = levelText;
                                    break;
                                }
                            }
                        }

                        // Look for industry focus
                        let industry = '';
                        const industrySelectors = ['.industry', '.sector', '.field', '[class*="industry"]'];
                        for (const industrySelector of industrySelectors) {
                            const industryElement = $el.find(industrySelector).first();
                            if (industryElement.length > 0) {
                                industry = industryElement.text().trim();
                                if (industry) break;
                            }
                        }

                        // Look for certification/credits
                        let certification = '';
                        const certSelectors = ['.certification', '.credits', '.certificate', '[class*="cert"]'];
                        for (const certSelector of certSelectors) {
                            const certElement = $el.find(certSelector).first();
                            if (certElement.length > 0) {
                                certification = certElement.text().trim();
                                if (certification) break;
                            }
                        }

                        // Look for cost/pricing
                        let cost = '';
                        const costSelectors = ['.cost', '.price', '.fee', '[class*="cost"]'];
                        for (const costSelector of costSelectors) {
                            const costElement = $el.find(costSelector).first();
                            if (costElement.length > 0) {
                                const costText = costElement.text().trim();
                                if (costText && (costText.includes('$') || costText.toLowerCase().includes('free'))) {
                                    cost = costText;
                                    break;
                                }
                            }
                        }

                        // Look for format (online, in-person, hybrid)
                        let format = '';
                        const formatSelectors = ['.format', '.delivery', '.mode', '[class*="format"]'];
                        for (const formatSelector of formatSelectors) {
                            const formatElement = $el.find(formatSelector).first();
                            if (formatElement.length > 0) {
                                const formatText = formatElement.text().trim();
                                if (formatText && formatText.match(/\b(online|in-person|hybrid|virtual|remote)\b/i)) {
                                    format = formatText;
                                    break;
                                }
                            }
                        }

                        // Look for duration
                        let duration = '';
                        const durationSelectors = ['.duration', '.length', '.time-commitment', '[class*="duration"]'];
                        for (const durationSelector of durationSelectors) {
                            const durationElement = $el.find(durationSelector).first();
                            if (durationElement.length > 0) {
                                const durationText = durationElement.text().trim();
                                if (durationText && durationText.match(/\d+\s*(hour|day|week|month)/i)) {
                                    duration = durationText;
                                    break;
                                }
                            }
                        }

                        // Look for networking opportunities
                        let networking = '';
                        const networkSelectors = ['.networking', '.connections', '.meetup', '[class*="network"]'];
                        for (const networkSelector of networkSelectors) {
                            const networkElement = $el.find(networkSelector).first();
                            if (networkElement.length > 0) {
                                networking = networkElement.text().trim();
                                if (networking) break;
                            }
                        }

                        // Look for description
                        let description = '';
                        const descSelectors = ['.description', '.excerpt', '.summary', '.details', '.content'];
                        for (const descSelector of descSelectors) {
                            const descElement = $el.find(descSelector).first();
                            if (descElement.length > 0) {
                                description = descElement.text().trim();
                                if (description && description.length > 20 && description.length < 300) break;
                            }
                        }

                        // Look for link
                        let eventLink = $el.find('a').first().attr('href') || '';
                        if (eventLink && !eventLink.startsWith('http')) {
                            eventLink = this.baseUrl + eventLink;
                        }

                        const event = {
                            title: title,
                            venue: venue,
                            location: this.venueLocation,
                            date: dateTime || 'Check website for professional development schedule',
                            category: skillArea,
                            instructor: instructor,
                            company: company,
                            experienceLevel: experienceLevel,
                            industry: industry,
                            certification: certification,
                            cost: cost,
                            format: format,
                            duration: duration,
                            networking: networking,
                            description: description,
                            link: eventLink || this.eventsUrl,
                            source: 'NYCProfessionalDevelopmentEvents'
                        };

                        events.push(event);
                    }
                });
            });

            // Look for general professional development information
            $('div, section, article, p').each((index, element) => {
                if (index > 100) return false; // Limit processing
                
                const $el = $(element);
                const text = $el.text().trim();
                
                if (text.length > 30 && text.length < 400) {
                    const hasProfKeywords = text.match(/\b(professional|career|business|training|development|skills|workshop|seminar|leadership)\b/i);
                    const hasEventPattern = text.match(/\b(event|workshop|seminar|training|conference|course|program|bootcamp)\b/i);
                    
                    if (hasProfKeywords && hasEventPattern) {
                        const sentences = text.split('.').filter(sentence => sentence.trim().length > 15);
                        const title = sentences[0]?.trim() || '';
                        
                        if (title && this.isValidEvent(title) && title.length > 20) {
                            const event = {
                                title: title.length > 150 ? title.substring(0, 150) + '...' : title,
                                venue: this.venueName,
                                location: this.venueLocation,
                                date: 'Check website for professional development schedule',
                                category: this.category,
                                link: this.eventsUrl,
                                source: 'NYCProfessionalDevelopmentEvents'
                            };

                            events.push(event);
                        }
                    }
                }
            });

            // Remove duplicates
            const uniqueEvents = this.removeDuplicateEvents(events);

            console.log(`✅ ${this.venueName}: Found ${uniqueEvents.length} events`);
            return uniqueEvents;

        } catch (error) {
            console.error(`❌ Error scraping ${this.venueName}:`, error.message);
            return [];
        }
    }

    /**
     * Remove duplicate events based on title and venue
     * @param {Array} events - Array of event objects
     * @returns {Array} Deduplicated events
     */
    removeDuplicateEvents(events) {
        const seen = new Set();
        return events.filter(event => {
            const key = `${event.title}-${event.venue}`.toLowerCase();
            if (seen.has(key)) {
                return false;
            }
            seen.add(key);
            return true;
        });
    }

    /**
     * Check if the extracted text represents a valid event
     * @param {string} title - Event title to validate
     * @returns {boolean} Whether the title appears to be a valid event
     */
    isValidEvent(title) {
        if (!title || title.length < 8 || title.length > 200) return false;
        
        const invalidKeywords = [
            'home', 'about', 'contact', 'privacy', 'terms', 'cookie', 
            'newsletter', 'subscribe', 'follow', 'social media', 'menu',
            'navigation', 'search', 'login', 'register', 'sign up',
            'facebook', 'twitter', 'instagram', 'youtube', 'linkedin',
            'more info', 'read more', 'learn more', 'view all',
            'click here', 'find out', 'discover', 'directions'
        ];
        
        // Check for valid professional development keywords
        const validKeywords = [
            'professional', 'career', 'business', 'training', 'development',
            'skills', 'workshop', 'seminar', 'leadership', 'event', 'conference',
            'course', 'program', 'bootcamp', 'certification', 'networking'
        ];
        
        const titleLower = title.toLowerCase();
        const hasValidKeyword = validKeywords.some(keyword => titleLower.includes(keyword));
        const hasInvalidKeyword = invalidKeywords.some(keyword => titleLower.includes(keyword));
        
        return hasValidKeyword && !hasInvalidKeyword;
    }

    /**
     * Get venue information
     * @returns {Object} Venue details
     */
    getVenueInfo() {
        return {
            name: this.venueName,
            location: this.venueLocation,
            category: this.category,
            website: this.baseUrl
        };
    }
}


// Function export for compatibility with runner/validator
module.exports = async (city) => {
  const scraper = new NYCProfessionalDevelopmentEvents();
  return await scraper.scrape(city);
};

// Also export the class for backward compatibility
module.exports.NYCProfessionalDevelopmentEvents = NYCProfessionalDevelopmentEvents;
