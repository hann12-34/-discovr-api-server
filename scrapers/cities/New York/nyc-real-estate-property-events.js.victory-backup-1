const { getCityFromArgs } = require('../../utils/city-util.js');
/**
 * NYC Real Estate & Property Events Scraper
 * 
 * Scrapes real estate and property events from NYC open houses and property shows
 * URL: https://www.eventbrite.com/d/ny--new-york/real-estate/
 */

const axios = require('axios');
const cheerio = require('cheerio');

class NYCRealEstatePropertyEvents {
    constructor() {
        this.venueName = 'NYC Real Estate & Property Events';
        this.venueLocation = 'Various NYC Properties & Real Estate Offices';
        this.baseUrl = 'https://www.eventbrite.com';
        this.eventsUrl = 'https://www.eventbrite.com/d/ny--new-york/real-estate/';
        this.category = 'Real Estate & Property';
    }

    /**
     * Scrape events from NYC Real Estate & Property Events
     * @returns {Promise<Array>} Array of event objects
     */
    async scrape() {
        console.log(`🏢 Scraping events from ${this.venueName}...`);
        
        try {
            const response = await axios.get(this.eventsUrl, {
                headers: {
                    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
                    'Accept-Language': 'en-US,en;q=0.9',
                    'Accept-Encoding': 'gzip, deflate, br',
                    'Cache-Control': 'max-age=0',
                    'sec-ch-ua': '"Not_A Brand";v="8", "Chromium";v="120", "Google Chrome";v="120"',
                    'sec-ch-ua-mobile': '?0',
                    'sec-ch-ua-platform': '"macOS"',
                    'sec-fetch-dest': 'document',
                    'sec-fetch-mode': 'navigate',
                    'sec-fetch-site': 'none',
                    'sec-fetch-user': '?1',
                    'upgrade-insecure-requests': '1',
                    'Referer': 'https://www.google.com/',
                    'DNT': '1',
                    'Connection': 'keep-alive'
                },
                timeout: 15000
            });

            const $ = cheerio.load(response.data);
            const events = [];

            // Look for real estate-specific event containers
            const eventSelectors = [
                '.real-estate-event', '.property-event', '.open-house-event',
                '.event-item', '.event-card', '.event', '.listing-event',
                '[class*="real-estate"]', '[class*="property"]', '[class*="event"]',
                '.card', '.content-card', '.home-tour-event', '.investment-event'
            ];

            eventSelectors.forEach(selector => {
                $(selector).each((index, element) => {
                    const $el = $(element);
                    let title = $el.find('h1, h2, h3, h4, .title, .event-title, .property-title, .name, .headline').first().text().trim();
                    
                    if (!title) {
                        const textContent = $el.text().trim();
                        const lines = textContent.split('\n').filter(line => line.trim().length > 0);
                        title = lines[0]?.trim() || '';
                    }

                    if (title && this.isValidEvent(title)) {
                        // Look for event date/time
                        let dateTime = '';
                        const dateSelectors = [
                            '.date', '.datetime', '[class*="date"]', 
                            'time', '.when', '.schedule', '.event-time'
                        ];
                        
                        for (const dateSelector of dateSelectors) {
                            const dateElement = $el.find(dateSelector).first();
                            if (dateElement.length > 0) {
                                dateTime = dateElement.text().trim();
                                if (dateTime && dateTime.length < 150) break;
                            }
                        }

                        // Look for property address/location
                        let propertyAddress = this.venueLocation;
                        const addressSelectors = ['.address', '.property-address', '.location', '[class*="address"]', '.venue'];
                        for (const addressSelector of addressSelectors) {
                            const addressElement = $el.find(addressSelector).first();
                            if (addressElement.length > 0) {
                                const addressText = addressElement.text().trim();
                                if (addressText && addressText.length > 0) {
                                    propertyAddress = addressText.length > 70 ? addressText.substring(0, 70) + '...' : addressText;
                                    break;
                                }
                            }
                        }

                        // Look for property type
                        let propertyType = '';
                        const typeSelectors = ['.property-type', '.type', '.category', '[class*="type"]'];
                        for (const typeSelector of typeSelectors) {
                            const typeElement = $el.find(typeSelector).first();
                            if (typeElement.length > 0) {
                                propertyType = typeElement.text().trim();
                                if (propertyType) break;
                            }
                        }

                        // Look for price/rent
                        let price = '';
                        const priceSelectors = ['.price', '.rent', '.cost', '[class*="price"]'];
                        for (const priceSelector of priceSelectors) {
                            const priceElement = $el.find(priceSelector).first();
                            if (priceElement.length > 0) {
                                const priceText = priceElement.text().trim();
                                if (priceText && (priceText.includes('$') || priceText.toLowerCase().includes('price'))) {
                                    price = priceText;
                                    break;
                                }
                            }
                        }

                        // Look for bedrooms/bathrooms
                        let bedsBaths = '';
                        const bedsSelectors = ['.beds', '.bedrooms', '.bathrooms', '[class*="bed"]'];
                        for (const bedsSelector of bedsSelectors) {
                            const bedsElement = $el.find(bedsSelector).first();
                            if (bedsElement.length > 0) {
                                const bedsText = bedsElement.text().trim();
                                if (bedsText && (bedsText.match(/\d+\s*(bed|bath|br|ba)/i))) {
                                    bedsBaths = bedsText;
                                    break;
                                }
                            }
                        }

                        // Look for square footage
                        let sqft = '';
                        const sqftSelectors = ['.sqft', '.square-feet', '.size', '[class*="sqft"]'];
                        for (const sqftSelector of sqftSelectors) {
                            const sqftElement = $el.find(sqftSelector).first();
                            if (sqftElement.length > 0) {
                                const sqftText = sqftElement.text().trim();
                                if (sqftText && (sqftText.includes('sqft') || sqftText.includes('sq ft'))) {
                                    sqft = sqftText;
                                    break;
                                }
                            }
                        }

                        // Look for real estate agent/broker
                        let agent = '';
                        const agentSelectors = ['.agent', '.broker', '.realtor', '[class*="agent"]'];
                        for (const agentSelector of agentSelectors) {
                            const agentElement = $el.find(agentSelector).first();
                            if (agentElement.length > 0) {
                                agent = agentElement.text().trim();
                                if (agent) break;
                            }
                        }

                        // Look for agency/brokerage
                        let agency = '';
                        const agencySelectors = ['.agency', '.brokerage', '.company', '[class*="agency"]'];
                        for (const agencySelector of agencySelectors) {
                            const agencyElement = $el.find(agencySelector).first();
                            if (agencyElement.length > 0) {
                                agency = agencyElement.text().trim();
                                if (agency) break;
                            }
                        }

                        // Look for property features
                        let features = '';
                        const featureSelectors = ['.features', '.amenities', '.highlights', '[class*="feature"]'];
                        for (const featureSelector of featureSelectors) {
                            const featureElement = $el.find(featureSelector).first();
                            if (featureElement.length > 0) {
                                features = featureElement.text().trim();
                                if (features) break;
                            }
                        }

                        // Look for description
                        let description = '';
                        const descSelectors = ['.description', '.excerpt', '.summary', '.details', '.content'];
                        for (const descSelector of descSelectors) {
                            const descElement = $el.find(descSelector).first();
                            if (descElement.length > 0) {
                                description = descElement.text().trim();
                                if (description && description.length > 20 && description.length < 300) break;
                            }
                        }

                        // Look for link
                        let eventLink = $el.find('a').first().attr('href') || '';
                        if (eventLink && !eventLink.startsWith('http')) {
                            eventLink = this.baseUrl + eventLink;
                        }

                        const event = {
                            title: title,
                            venue: this.venueName,
                            location: propertyAddress,
                            date: dateTime || 'Check website for real estate event schedule',
                            category: this.category,
                            propertyType: propertyType,
                            price: price,
                            bedsBaths: bedsBaths,
                            sqft: sqft,
                            agent: agent,
                            agency: agency,
                            features: features,
                            description: description,
                            link: eventLink || this.eventsUrl,
                            source: 'NYCRealEstatePropertyEvents'
                        };

                        events.push(event);
                    }
                });
            });

            // Look for general real estate information
            $('div, section, article, p').each((index, element) => {
                if (index > 100) return false; // Limit processing
                
                const $el = $(element);
                const text = $el.text().trim();
                
                if (text.length > 30 && text.length < 400) {
                    const hasRealEstateKeywords = text.match(/\b(real estate|property|open house|home tour|apartment|condo|rental|investment)\b/i);
                    const hasEventPattern = text.match(/\b(event|tour|showing|open house|seminar|workshop|expo|fair)\b/i);
                    
                    if (hasRealEstateKeywords && hasEventPattern) {
                        const sentences = text.split('.').filter(sentence => sentence.trim().length > 15);
                        const title = sentences[0]?.trim() || '';
                        
                        if (title && this.isValidEvent(title) && title.length > 20) {
                            const event = {
                                title: title.length > 150 ? title.substring(0, 150) + '...' : title,
                                venue: this.venueName,
                                location: this.venueLocation,
                                date: 'Check website for real estate event schedule',
                                category: this.category,
                                link: this.eventsUrl,
                                source: 'NYCRealEstatePropertyEvents'
                            };

                            events.push(event);
                        }
                    }
                }
            });

            // Remove duplicates
            const uniqueEvents = this.removeDuplicateEvents(events);

            console.log(`✅ ${this.venueName}: Found ${uniqueEvents.length} events`);
            return uniqueEvents;

        } catch (error) {
            console.error(`❌ Error scraping ${this.venueName}:`, error.message);
            return [];
        }
    }

    /**
     * Remove duplicate events based on title and location
     * @param {Array} events - Array of event objects
     * @returns {Array} Deduplicated events
     */
    removeDuplicateEvents(events) {
        const seen = new Set();
        return events.filter(event => {
            const key = `${event.title}-${event.location}`.toLowerCase();
            if (seen.has(key)) {
                return false;
            }
            seen.add(key);
            return true;
        });
    }

    /**
     * Check if the extracted text represents a valid event
     * @param {string} title - Event title to validate
     * @returns {boolean} Whether the title appears to be a valid event
     */
    isValidEvent(title) {
        if (!title || title.length < 8 || title.length > 200) return false;
        
        const invalidKeywords = [
            'home', 'about', 'contact', 'privacy', 'terms', 'cookie', 
            'newsletter', 'subscribe', 'follow', 'social media', 'menu',
            'navigation', 'search', 'login', 'register', 'sign up',
            'facebook', 'twitter', 'instagram', 'youtube', 'linkedin',
            'more info', 'read more', 'learn more', 'view all',
            'click here', 'find out', 'discover', 'directions'
        ];
        
        // Check for valid real estate keywords
        const validKeywords = [
            'real estate', 'property', 'open house', 'home tour', 'apartment',
            'condo', 'rental', 'investment', 'event', 'tour', 'showing',
            'seminar', 'workshop', 'expo', 'fair', 'listing'
        ];
        
        const titleLower = title.toLowerCase();
        const hasValidKeyword = validKeywords.some(keyword => titleLower.includes(keyword));
        const hasInvalidKeyword = invalidKeywords.some(keyword => titleLower.includes(keyword));
        
        return hasValidKeyword && !hasInvalidKeyword;
    }

    /**
     * Get venue information
     * @returns {Object} Venue details
     */
    getVenueInfo() {
        return {
            name: this.venueName,
            location: this.venueLocation,
            category: this.category,
            website: this.baseUrl
        };
    }
}


// Function export for compatibility with runner/validator
module.exports = async (city) => {
  const scraper = new NYCRealEstatePropertyEvents();
  return await scraper.scrape(city);
};

// Also export the class for backward compatibility
module.exports.NYCRealEstatePropertyEvents = NYCRealEstatePropertyEvents;
