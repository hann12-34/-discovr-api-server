const { getCityFromArgs } = require('../../utils/city-util.js');
const axios = require('axios');
const cheerio = require('cheerio');

/**
 * Lincoln Center Events Scraper
 * Scrapes events from Lincoln Center's official website
 */
class LincolnCenterEvents {
    constructor() {
        this.venueName = 'Lincoln Center';
        this.venueLocation = 'New York, NY';
        this.baseUrl = 'https://www.meetup.com';
        this.eventsUrl = 'https://www.meetup.com/find/?keywords=lincoln%20center&location=us--ny--new_york';
        this.category = 'Music';
    }

    /**
     * Main scraping method to fetch events from Lincoln Center
     */
    async scrape() {
        console.log(`🎭 Scraping events from ${this.venueName}...`);
        
        try {
            const response = await axios.get(this.eventsUrl, {
                headers: {
                    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
                },
                timeout: 15000
            });

            const $ = cheerio.load(response.data);
            const events = [];

            // Find Lincoln Center related events
            $('h1, h2, h3, h4, .title').each((index, element) => {
                if (index > 40) return false;
                
                const $el = $(element);
                const text = $el.text().trim();
                
                if (text && text.length > 15) {
                    const hasLincolnKeywords = text.match(/\b(lincoln|center|philharmonic|opera|ballet|jazz|classical)\b/i);
                    const hasArtsKeywords = text.match(/\b(concert|performance|show|music|dance|opera|ballet)\b/i);
                    const hasTimeKeywords = text.match(/\b(2024|2025|tonight|tomorrow|weekend|upcoming|season|January|February|March|April|May|June|July|August|September|October|November|December)\b/i);
                    
                    if (hasLincolnKeywords && hasArtsKeywords && hasTimeKeywords) {
                        const lines = text.split('\n').filter(line => line.trim().length > 20);
                        const eventTitle = lines[0]?.trim() || text.split(' ').slice(0, 12).join(' ');
                        
                        if (eventTitle && eventTitle.length > 15 && this.isValidEvent(eventTitle)) {
                            events.push(this.createEvent(eventTitle, text.substring(0, 200), '', '', ''));
                        }
                    }
                }
            });

            // Approach 3: Look for specific performance and show titles
            $('h1, h2, h3, h4, .headline, .performance-name, .show-name').each((index, element) => {
                if (index > 50) return false;
                const $el = $(element);
                const title = $el.text().trim();
                const parentText = $el.parent().text().trim();
                
                if (title && title.length > 10 && title.length < 150 && this.isValidEvent(title)) {
                    if (parentText.match(/\b(Lincoln Center|performance|concert|opera|ballet|symphony|theater|tickets|schedule)\b/i)) {
                        events.push(this.createEvent(title, parentText.substring(0, 150), '', '', ''));
                    }
                }
            });

            console.log(`✅ ${this.venueName}: Found ${events.length} events`);
            return events;
            
        } catch (error) {
            console.log(`❌ Error scraping ${this.venueName}: ${error.message}`);
            return [];
        }
    }

    /**
     * Check if the event title is valid and not navigation/generic content
     */
    isValidEvent(title) {
        const invalidPatterns = [
            /^(home|about|contact|tickets|schedule|calendar|events|shows|news|more|login|sign|search|menu|nav)$/i,
            /^(buy|get|find|see|view|click|learn|discover|explore|visit|register)$/i,
            /^(page|site|website|link|button|form|field|input|select|option)$/i,
            /^(the|and|or|but|for|with|from|this|that|these|those|all|any|some)$/i,
            /^(lincoln|center|performance|concert|opera|ballet|symphony|theater)$/i,
            /^\s*$/,
            /^.{1,8}$/,
            /^.{200,}$/
        ];
        
        return !invalidPatterns.some(pattern => pattern.test(title.trim()));
    }

    /**
     * Create a standardized event object
     */
    createEvent(title, description, date, link, venue) {
        return {
            title: title.trim(),
            venue: venue || this.venueName,
            location: this.venueLocation,
            date: date || 'Check website for dates',
            category: this.category,
            description: description || '',
            link: link ? (link.startsWith('http') ? link : this.baseUrl + link) : this.eventsUrl,
            source: 'LincolnCenter'
        };
    }

    /**
     * Alternative method name for backward compatibility
     */
    async fetchEvents() {
        return await this.scrape();
    }
}


// Function export for compatibility with runner/validator
module.exports = async (city) => {
  const scraper = new LincolnCenterEvents();
  return await scraper.scrape(city);
};

// Also export the class for backward compatibility
module.exports.LincolnCenterEvents = LincolnCenterEvents;
