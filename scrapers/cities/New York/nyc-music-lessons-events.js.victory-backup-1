const { getCityFromArgs } = require('../../utils/city-util.js');
/**
 * NYC Music Lessons Events Scraper
 * 
 * Scrapes events from NYC music lessons, workshops, and masterclasses
 * URL: https://www.eventbrite.com/d/ny--new-york/music-lessons/
 */

const axios = require('axios');
const cheerio = require('cheerio');

class NYCMusicLessonsEvents {
    constructor() {
        this.venueName = 'NYC Music Lessons';
        this.venueLocation = 'Various NYC Music Studios';
        this.baseUrl = 'https://www.eventbrite.com';
        this.eventsUrl = 'https://www.eventbrite.com/d/ny--new-york/music-lessons/';
        this.category = 'Music Lessons & Education';
    }

    /**
     * Scrape events from NYC Music Lessons
     * @returns {Promise<Array>} Array of event objects
     */
    async scrape() {
        console.log(`🎵 Scraping events from ${this.venueName}...`);
        
        try {
            const response = await axios.get(this.eventsUrl, {
                headers: {
                    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
                    'Accept-Language': 'en-US,en;q=0.9',
                    'Accept-Encoding': 'gzip, deflate, br',
                    'Cache-Control': 'max-age=0',
                    'sec-ch-ua': '"Not_A Brand";v="8", "Chromium";v="120", "Google Chrome";v="120"',
                    'sec-ch-ua-mobile': '?0',
                    'sec-ch-ua-platform': '"macOS"',
                    'sec-fetch-dest': 'document',
                    'sec-fetch-mode': 'navigate',
                    'sec-fetch-site': 'none',
                    'sec-fetch-user': '?1',
                    'upgrade-insecure-requests': '1',
                    'Referer': 'https://www.google.com/',
                    'DNT': '1',
                    'Connection': 'keep-alive'
                },
                timeout: 15000
            });

            const $ = cheerio.load(response.data);
            const events = [];

            // Look for music lesson-specific event containers
            const eventSelectors = [
                '.music-event', '.lesson-event', '.masterclass-event',
                '.event-item', '.event-card', '.event', '.class-item',
                '[class*="music"]', '[class*="lesson"]', '[class*="event"]',
                '.card', '.content-card', '.workshop-event', '.instruction'
            ];

            eventSelectors.forEach(selector => {
                $(selector).each((index, element) => {
                    const $el = $(element);
                    let title = $el.find('h1, h2, h3, h4, .title, .event-title, .lesson-title, .name, .headline').first().text().trim();
                    
                    if (!title) {
                        const textContent = $el.text().trim();
                        const lines = textContent.split('\n').filter(line => line.trim().length > 0);
                        title = lines[0]?.trim() || '';
                    }

                    if (title && this.isValidEvent(title)) {
                        // Look for event date/time
                        let dateTime = '';
                        const dateSelectors = [
                            '.date', '.datetime', '[class*="date"]', 
                            'time', '.when', '.schedule', '.lesson-time'
                        ];
                        
                        for (const dateSelector of dateSelectors) {
                            const dateElement = $el.find(dateSelector).first();
                            if (dateElement.length > 0) {
                                dateTime = dateElement.text().trim();
                                if (dateTime && dateTime.length < 150) break;
                            }
                        }

                        // Look for studio/venue
                        let studio = this.venueLocation;
                        const studioSelectors = ['.studio', '.venue', '.location', '[class*="studio"]', '.music-school'];
                        for (const studioSelector of studioSelectors) {
                            const studioElement = $el.find(studioSelector).first();
                            if (studioElement.length > 0) {
                                const studioText = studioElement.text().trim();
                                if (studioText && studioText.length > 0) {
                                    studio = studioText.length > 60 ? studioText.substring(0, 60) + '...' : studioText;
                                    break;
                                }
                            }
                        }

                        // Look for instrument/genre
                        let instrument = '';
                        const instrumentSelectors = ['.instrument', '.genre', '.music-type', '[class*="instrument"]'];
                        for (const instrSelector of instrumentSelectors) {
                            const instrElement = $el.find(instrSelector).first();
                            if (instrElement.length > 0) {
                                instrument = instrElement.text().trim();
                                if (instrument) break;
                            }
                        }

                        // Look for instructor/teacher
                        let instructor = '';
                        const instructorSelectors = ['.instructor', '.teacher', '.master', '[class*="instructor"]'];
                        for (const teacherSelector of instructorSelectors) {
                            const teacherElement = $el.find(teacherSelector).first();
                            if (teacherElement.length > 0) {
                                instructor = teacherElement.text().trim();
                                if (instructor) break;
                            }
                        }

                        // Look for skill level
                        let skillLevel = '';
                        const skillSelectors = ['.skill-level', '.level', '.experience', '[class*="level"]'];
                        for (const skillSelector of skillSelectors) {
                            const skillElement = $el.find(skillSelector).first();
                            if (skillElement.length > 0) {
                                skillLevel = skillElement.text().trim();
                                if (skillLevel) break;
                            }
                        }

                        // Look for age group
                        let ageGroup = '';
                        const ageSelectors = ['.age-group', '.age', '.target-age', '[class*="age"]'];
                        for (const ageSelector of ageSelectors) {
                            const ageElement = $el.find(ageSelector).first();
                            if (ageElement.length > 0) {
                                ageGroup = ageElement.text().trim();
                                if (ageGroup) break;
                            }
                        }

                        // Look for lesson format
                        let format = this.category;
                        const formatSelectors = ['.format', '.type', '.lesson-type', '[class*="format"]'];
                        for (const formatSelector of formatSelectors) {
                            const formatElement = $el.find(formatSelector).first();
                            if (formatElement.length > 0) {
                                const formatText = formatElement.text().trim();
                                if (formatText && formatText.length > 0) {
                                    format = formatText;
                                    break;
                                }
                            }
                        }

                        // Look for cost/price
                        let cost = '';
                        const costSelectors = ['.price', '.cost', '.fee', '[class*="price"]'];
                        for (const costSelector of costSelectors) {
                            const costElement = $el.find(costSelector).first();
                            if (costElement.length > 0) {
                                const costText = costElement.text().trim();
                                if (costText && (costText.includes('$') || costText.toLowerCase().includes('free'))) {
                                    cost = costText;
                                    break;
                                }
                            }
                        }

                        // Look for description
                        let description = '';
                        const descSelectors = ['.description', '.excerpt', '.summary', '.details', '.content'];
                        for (const descSelector of descSelectors) {
                            const descElement = $el.find(descSelector).first();
                            if (descElement.length > 0) {
                                description = descElement.text().trim();
                                if (description && description.length > 20 && description.length < 300) break;
                            }
                        }

                        // Look for link
                        let eventLink = $el.find('a').first().attr('href') || '';
                        if (eventLink && !eventLink.startsWith('http')) {
                            eventLink = this.baseUrl + eventLink;
                        }

                        const event = {
                            title: title,
                            venue: studio,
                            location: this.venueLocation,
                            date: dateTime || 'Check website for lesson schedule',
                            category: format,
                            instrument: instrument,
                            instructor: instructor,
                            skillLevel: skillLevel,
                            ageGroup: ageGroup,
                            cost: cost,
                            description: description,
                            link: eventLink || this.eventsUrl,
                            source: 'NYCMusicLessonsEvents'
                        };

                        events.push(event);
                    }
                });
            });

            // Look for general music education information
            $('div, section, article, p').each((index, element) => {
                if (index > 100) return false; // Limit processing
                
                const $el = $(element);
                const text = $el.text().trim();
                
                if (text.length > 30 && text.length < 400) {
                    const hasMusicKeywords = text.match(/\b(music|piano|guitar|violin|drums|singing|voice|theory|composition|production)\b/i);
                    const hasLessonPattern = text.match(/\b(lesson|class|workshop|masterclass|instruction|tutorial|learn|teach)\b/i);
                    
                    if (hasMusicKeywords && hasLessonPattern) {
                        const sentences = text.split('.').filter(sentence => sentence.trim().length > 15);
                        const title = sentences[0]?.trim() || '';
                        
                        if (title && this.isValidEvent(title) && title.length > 20) {
                            const event = {
                                title: title.length > 150 ? title.substring(0, 150) + '...' : title,
                                venue: this.venueName,
                                location: this.venueLocation,
                                date: 'Check website for lesson schedule',
                                category: this.category,
                                link: this.eventsUrl,
                                source: 'NYCMusicLessonsEvents'
                            };

                            events.push(event);
                        }
                    }
                }
            });

            // Remove duplicates
            const uniqueEvents = this.removeDuplicateEvents(events);

            console.log(`✅ ${this.venueName}: Found ${uniqueEvents.length} events`);
            return uniqueEvents;

        } catch (error) {
            console.error(`❌ Error scraping ${this.venueName}:`, error.message);
            return [];
        }
    }

    /**
     * Remove duplicate events based on title and studio
     * @param {Array} events - Array of event objects
     * @returns {Array} Deduplicated events
     */
    removeDuplicateEvents(events) {
        const seen = new Set();
        return events.filter(event => {
            const key = `${event.title}-${event.venue}`.toLowerCase();
            if (seen.has(key)) {
                return false;
            }
            seen.add(key);
            return true;
        });
    }

    /**
     * Check if the extracted text represents a valid event
     * @param {string} title - Event title to validate
     * @returns {boolean} Whether the title appears to be a valid event
     */
    isValidEvent(title) {
        if (!title || title.length < 8 || title.length > 200) return false;
        
        const invalidKeywords = [
            'home', 'about', 'contact', 'privacy', 'terms', 'cookie', 
            'newsletter', 'subscribe', 'follow', 'social', 'menu',
            'navigation', 'search', 'login', 'register', 'sign up',
            'facebook', 'twitter', 'instagram', 'youtube', 'linkedin',
            'more info', 'read more', 'learn more', 'view all',
            'click here', 'find out', 'discover', 'directions'
        ];
        
        // Check for valid music lesson keywords
        const validKeywords = [
            'music', 'piano', 'guitar', 'violin', 'drums', 'singing',
            'voice', 'theory', 'composition', 'production', 'lesson',
            'class', 'workshop', 'masterclass', 'instruction', 'tutorial'
        ];
        
        const titleLower = title.toLowerCase();
        const hasValidKeyword = validKeywords.some(keyword => titleLower.includes(keyword));
        const hasInvalidKeyword = invalidKeywords.some(keyword => titleLower.includes(keyword));
        
        return hasValidKeyword && !hasInvalidKeyword;
    }

    /**
     * Get venue information
     * @returns {Object} Venue details
     */
    getVenueInfo() {
        return {
            name: this.venueName,
            location: this.venueLocation,
            category: this.category,
            website: this.baseUrl
        };
    }
}


// Function export for compatibility with runner/validator
module.exports = async (city) => {
  const scraper = new NYCMusicLessonsEvents();
  return await scraper.scrape(city);
};

// Also export the class for backward compatibility
module.exports.NYCMusicLessonsEvents = NYCMusicLessonsEvents;
