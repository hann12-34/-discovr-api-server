const { getCityFromArgs } = require('../../utils/city-util.js');
/**
 * NYC Tours & Experiences Events Scraper
 * 
 * Scrapes tour and experience events from NYC tour operators, attractions, and experience providers
 * URL: https://www.eventbrite.com/d/ny--new-york/tours/
 */

const axios = require('axios');
const cheerio = require('cheerio');

class NYCToursExperiencesEvents {
    constructor() {
        this.venueName = 'NYC Tours & Experiences Events';
        this.venueLocation = 'Various NYC Attractions, Tour Operators & Experience Providers';
        this.baseUrl = 'https://www.eventbrite.com';
        this.eventsUrl = 'https://www.eventbrite.com/d/ny--new-york/tours/';
        this.category = 'Tours & Experiences';
    }

    /**
     * Scrape events from NYC Tours & Experiences Events
     * @returns {Promise<Array>} Array of event objects
     */
    async scrape() {
        console.log(`🗽 Scraping events from ${this.venueName}...`);
        
        try {
            const response = await axios.get(this.eventsUrl, {
                headers: {
                    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
                    'Accept-Language': 'en-US,en;q=0.9',
                    'Accept-Encoding': 'gzip, deflate, br',
                    'Cache-Control': 'max-age=0',
                    'sec-ch-ua': '"Not_A Brand";v="8", "Chromium";v="120", "Google Chrome";v="120"',
                    'sec-ch-ua-mobile': '?0',
                    'sec-ch-ua-platform': '"macOS"',
                    'sec-fetch-dest': 'document',
                    'sec-fetch-mode': 'navigate',
                    'sec-fetch-site': 'none',
                    'sec-fetch-user': '?1',
                    'upgrade-insecure-requests': '1',
                    'Referer': 'https://www.google.com/',
                    'DNT': '1',
                    'Connection': 'keep-alive'
                },
                timeout: 15000
            });

            const $ = cheerio.load(response.data);
            const events = [];

            // Look for tour/experience-specific event containers
            const eventSelectors = [
                '.tour-event', '.experience-event', '.sightseeing-event',
                '.event-item', '.event-card', '.event', '.attraction-event',
                '[class*="tour"]', '[class*="experience"]', '[class*="event"]',
                '.card', '.content-card', '.guided-tour', '.adventure-event'
            ];

            eventSelectors.forEach(selector => {
                $(selector).each((index, element) => {
                    const $el = $(element);
                    let title = $el.find('h1, h2, h3, h4, .title, .event-title, .tour-title, .name, .headline').first().text().trim();
                    
                    if (!title) {
                        const textContent = $el.text().trim();
                        const lines = textContent.split('\n').filter(line => line.trim().length > 0);
                        title = lines[0]?.trim() || '';
                    }

                    if (title && this.isValidEvent(title)) {
                        // Look for event date/time
                        let dateTime = '';
                        const dateSelectors = [
                            '.date', '.datetime', '[class*="date"]', 
                            'time', '.when', '.schedule', '.event-time', '.tour-time'
                        ];
                        
                        for (const dateSelector of dateSelectors) {
                            const dateElement = $el.find(dateSelector).first();
                            if (dateElement.length > 0) {
                                dateTime = dateElement.text().trim();
                                if (dateTime && dateTime.length < 150) break;
                            }
                        }

                        // Look for venue/starting point/attraction
                        let venue = this.venueLocation;
                        const venueSelectors = ['.venue', '.starting-point', '.attraction', '[class*="venue"]', '.location', '.meeting-point'];
                        for (const venueSelector of venueSelectors) {
                            const venueElement = $el.find(venueSelector).first();
                            if (venueElement.length > 0) {
                                const venueText = venueElement.text().trim();
                                if (venueText && venueText.length > 0) {
                                    venue = venueText.length > 70 ? venueText.substring(0, 70) + '...' : venueText;
                                    break;
                                }
                            }
                        }

                        // Look for tour type/experience category
                        let tourType = this.category;
                        const typeSelectors = ['.tour-type', '.experience-type', '.category', '[class*="type"]'];
                        for (const typeSelector of typeSelectors) {
                            const typeElement = $el.find(typeSelector).first();
                            if (typeElement.length > 0) {
                                const typeText = typeElement.text().trim();
                                if (typeText && typeText.match(/\b(walking|bus|bike|boat|helicopter|food|historical|architectural)\b/i)) {
                                    tourType = typeText;
                                    break;
                                }
                            }
                        }

                        // Look for guide/tour leader
                        let guide = '';
                        const guideSelectors = ['.guide', '.tour-guide', '.leader', '[class*="guide"]'];
                        for (const guideSelector of guideSelectors) {
                            const guideElement = $el.find(guideSelector).first();
                            if (guideElement.length > 0) {
                                guide = guideElement.text().trim();
                                if (guide) break;
                            }
                        }

                        // Look for duration
                        let duration = '';
                        const durationSelectors = ['.duration', '.length', '.time', '[class*="duration"]'];
                        for (const durationSelector of durationSelectors) {
                            const durationElement = $el.find(durationSelector).first();
                            if (durationElement.length > 0) {
                                const durationText = durationElement.text().trim();
                                if (durationText && durationText.match(/\d+\s*(hour|min|day)/i)) {
                                    duration = durationText;
                                    break;
                                }
                            }
                        }

                        // Look for group size/capacity
                        let groupSize = '';
                        const groupSelectors = ['.group-size', '.capacity', '.max-participants', '[class*="group"]'];
                        for (const groupSelector of groupSelectors) {
                            const groupElement = $el.find(groupSelector).first();
                            if (groupElement.length > 0) {
                                const groupText = groupElement.text().trim();
                                if (groupText && groupText.match(/\d+/)) {
                                    groupSize = groupText;
                                    break;
                                }
                            }
                        }

                        // Look for price/cost
                        let price = '';
                        const priceSelectors = ['.price', '.cost', '.fee', '[class*="price"]'];
                        for (const priceSelector of priceSelectors) {
                            const priceElement = $el.find(priceSelector).first();
                            if (priceElement.length > 0) {
                                const priceText = priceElement.text().trim();
                                if (priceText && (priceText.includes('$') || priceText.toLowerCase().includes('free'))) {
                                    price = priceText;
                                    break;
                                }
                            }
                        }

                        // Look for language
                        let language = '';
                        const languageSelectors = ['.language', '.spoken-in', '.available-in', '[class*="language"]'];
                        for (const languageSelector of languageSelectors) {
                            const languageElement = $el.find(languageSelector).first();
                            if (languageElement.length > 0) {
                                const languageText = languageElement.text().trim();
                                if (languageText && languageText.match(/\b(English|Spanish|French|German|Italian|Chinese|Japanese)\b/i)) {
                                    language = languageText;
                                    break;
                                }
                            }
                        }

                        // Look for difficulty level
                        let difficulty = '';
                        const difficultySelectors = ['.difficulty', '.level', '.fitness-level', '[class*="difficulty"]'];
                        for (const difficultySelector of difficultySelectors) {
                            const difficultyElement = $el.find(difficultySelector).first();
                            if (difficultyElement.length > 0) {
                                const difficultyText = difficultyElement.text().trim();
                                if (difficultyText && difficultyText.match(/\b(easy|moderate|challenging|strenuous)\b/i)) {
                                    difficulty = difficultyText;
                                    break;
                                }
                            }
                        }

                        // Look for age restrictions/recommendations
                        let ageRecommendation = '';
                        const ageSelectors = ['.age-recommendation', '.suitable-for', '.age-limit', '[class*="age"]'];
                        for (const ageSelector of ageSelectors) {
                            const ageElement = $el.find(ageSelector).first();
                            if (ageElement.length > 0) {
                                const ageText = ageElement.text().trim();
                                if (ageText && ageText.match(/\b(children|adults|families|seniors|all ages)\b/i)) {
                                    ageRecommendation = ageText;
                                    break;
                                }
                            }
                        }

                        // Look for inclusions/what's provided
                        let inclusions = '';
                        const inclusionSelectors = ['.inclusions', '.included', '.provided', '[class*="inclusion"]'];
                        for (const inclusionSelector of inclusionSelectors) {
                            const inclusionElement = $el.find(inclusionSelector).first();
                            if (inclusionElement.length > 0) {
                                inclusions = inclusionElement.text().trim();
                                if (inclusions) break;
                            }
                        }

                        // Look for weather dependency
                        let weather = '';
                        const weatherSelectors = ['.weather', '.rain-or-shine', '.weather-dependent', '[class*="weather"]'];
                        for (const weatherSelector of weatherSelectors) {
                            const weatherElement = $el.find(weatherSelector).first();
                            if (weatherElement.length > 0) {
                                weather = weatherElement.text().trim();
                                if (weather) break;
                            }
                        }

                        // Look for cancellation policy
                        let cancellation = '';
                        const cancellationSelectors = ['.cancellation', '.refund-policy', '.booking-policy', '[class*="cancellation"]'];
                        for (const cancellationSelector of cancellationSelectors) {
                            const cancellationElement = $el.find(cancellationSelector).first();
                            if (cancellationElement.length > 0) {
                                cancellation = cancellationElement.text().trim();
                                if (cancellation) break;
                            }
                        }

                        // Look for highlights/attractions visited
                        let highlights = '';
                        const highlightSelectors = ['.highlights', '.attractions', '.stops', '[class*="highlight"]'];
                        for (const highlightSelector of highlightSelectors) {
                            const highlightElement = $el.find(highlightSelector).first();
                            if (highlightElement.length > 0) {
                                highlights = highlightElement.text().trim();
                                if (highlights) break;
                            }
                        }

                        // Look for transportation/meeting details
                        let transportation = '';
                        const transportSelectors = ['.transportation', '.meeting-details', '.pickup', '[class*="transport"]'];
                        for (const transportSelector of transportSelectors) {
                            const transportElement = $el.find(transportSelector).first();
                            if (transportElement.length > 0) {
                                transportation = transportElement.text().trim();
                                if (transportation) break;
                            }
                        }

                        // Look for description
                        let description = '';
                        const descSelectors = ['.description', '.excerpt', '.summary', '.details', '.content'];
                        for (const descSelector of descSelectors) {
                            const descElement = $el.find(descSelector).first();
                            if (descElement.length > 0) {
                                description = descElement.text().trim();
                                if (description && description.length > 20 && description.length < 300) break;
                            }
                        }

                        // Look for link
                        let eventLink = $el.find('a').first().attr('href') || '';
                        if (eventLink && !eventLink.startsWith('http')) {
                            eventLink = this.baseUrl + eventLink;
                        }

                        const event = {
                            title: title,
                            venue: venue,
                            location: this.venueLocation,
                            date: dateTime || 'Check website for tour/experience schedule',
                            category: tourType,
                            guide: guide,
                            duration: duration,
                            groupSize: groupSize,
                            price: price,
                            language: language,
                            difficulty: difficulty,
                            ageRecommendation: ageRecommendation,
                            inclusions: inclusions,
                            weather: weather,
                            cancellation: cancellation,
                            highlights: highlights,
                            transportation: transportation,
                            description: description,
                            link: eventLink || this.eventsUrl,
                            source: 'NYCToursExperiencesEvents'
                        };

                        events.push(event);
                    }
                });
            });

            // Look for general tour/experience information
            $('div, section, article, p').each((index, element) => {
                if (index > 100) return false; // Limit processing
                
                const $el = $(element);
                const text = $el.text().trim();
                
                if (text.length > 30 && text.length < 400) {
                    const hasTourKeywords = text.match(/\b(tour|experience|sightseeing|guide|visit|explore|discover|attraction)\b/i);
                    const hasEventPattern = text.match(/\b(walking|bus|bike|boat|helicopter|food|historical|guided|self-guided)\b/i);
                    
                    if (hasTourKeywords && hasEventPattern) {
                        const sentences = text.split('.').filter(sentence => sentence.trim().length > 15);
                        const title = sentences[0]?.trim() || '';
                        
                        if (title && this.isValidEvent(title) && title.length > 20) {
                            const event = {
                                title: title.length > 150 ? title.substring(0, 150) + '...' : title,
                                venue: this.venueName,
                                location: this.venueLocation,
                                date: 'Check website for tour/experience schedule',
                                category: this.category,
                                link: this.eventsUrl,
                                source: 'NYCToursExperiencesEvents'
                            };

                            events.push(event);
                        }
                    }
                }
            });

            // Remove duplicates
            const uniqueEvents = this.removeDuplicateEvents(events);

            console.log(`✅ ${this.venueName}: Found ${uniqueEvents.length} events`);
            return uniqueEvents;

        } catch (error) {
            console.error(`❌ Error scraping ${this.venueName}:`, error.message);
            return [];
        }
    }

    /**
     * Remove duplicate events based on title and venue
     * @param {Array} events - Array of event objects
     * @returns {Array} Deduplicated events
     */
    removeDuplicateEvents(events) {
        const seen = new Set();
        return events.filter(event => {
            const key = `${event.title}-${event.venue}`.toLowerCase();
            if (seen.has(key)) {
                return false;
            }
            seen.add(key);
            return true;
        });
    }

    /**
     * Check if the extracted text represents a valid event
     * @param {string} title - Event title to validate
     * @returns {boolean} Whether the title appears to be a valid event
     */
    isValidEvent(title) {
        if (!title || title.length < 8 || title.length > 200) return false;
        
        const invalidKeywords = [
            'home', 'about', 'contact', 'privacy', 'terms', 'cookie', 
            'newsletter', 'subscribe', 'follow', 'social media', 'menu',
            'navigation', 'search', 'login', 'register', 'sign up',
            'facebook', 'twitter', 'instagram', 'youtube', 'linkedin',
            'more info', 'read more', 'learn more', 'view all',
            'click here', 'find out', 'discover', 'directions'
        ];
        
        // Check for valid tour/experience keywords
        const validKeywords = [
            'tour', 'experience', 'sightseeing', 'guide', 'visit', 'explore',
            'discover', 'attraction', 'walking', 'bus', 'bike', 'boat',
            'helicopter', 'food', 'historical', 'guided', 'self-guided', 'adventure'
        ];
        
        const titleLower = title.toLowerCase();
        const hasValidKeyword = validKeywords.some(keyword => titleLower.includes(keyword));
        const hasInvalidKeyword = invalidKeywords.some(keyword => titleLower.includes(keyword));
        
        return hasValidKeyword && !hasInvalidKeyword;
    }

    /**
     * Get venue information
     * @returns {Object} Venue details
     */
    getVenueInfo() {
        return {
            name: this.venueName,
            location: this.venueLocation,
            category: this.category,
            website: this.baseUrl
        };
    }
}

module.exports = NYCToursExperiencesEvents;
