const { getCityFromArgs } = require('../../utils/city-util.js');
/**
 * Circle Line Sightseeing Events Scraper
 * 
 * Scrapes events from Circle Line Sightseeing cruises and tours
 * URL: https://www.circleline.com
 */

const axios = require('axios');
const cheerio = require('cheerio');

class CircleLineEvents {
    constructor() {
        this.venueName = 'Circle Line Sightseeing';
        this.venueLocation = 'Pier 83, W 42nd St, New York, NY 10036';
        this.baseUrl = 'https://www.circleline.com';
        this.eventsUrl = 'https://www.circleline.com';
        this.category = 'Sightseeing & Harbor Cruises';
    }

    /**
     * Scrape events from Circle Line Sightseeing
     * @returns {Promise<Array>} Array of event objects
     */
    async scrape() {
        console.log(`🛳️ Scraping events from ${this.venueName}...`);
        
        try {
            const response = await axios.get(this.eventsUrl, {
                headers: {
                    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'
                },
                timeout: 15000
            });

            const $ = cheerio.load(response.data);
            const events = [];

            console.log('⛵ Extracting Circle Line cruises and tours...');
            
            // Look for H2/H3 headings that contain tour names based on discovered structure
            $('h2, h3').each((index, element) => {
                const $el = $(element);
                const text = $el.text().trim();
                
                // Target headings with cruise/tour names (not generic headers)
                if (text.length > 5 && text.length < 100 && 
                    !text.match(/^(Next Available|CityPASS|See NYC|The Only Way)/i) &&
                    (text.match(/\b(tour|cruise|harbor|liberty|landmarks|lights|express|sunset|nyc|best of|sip)\b/i) ||
                     text.match(/^[A-Z][a-z]+ [A-Z]/))) { // Tour name pattern
                    
                    if (this.isValidEvent(text)) {
                        const event = {
                            title: text,
                            venue: this.venueName,
                            location: this.venueLocation,
                            date: 'Check website for cruise schedules',
                            category: this.category,
                            description: `NYC harbor cruise and sightseeing tour`,
                            link: this.eventsUrl,
                            source: 'CircleLineEvents'
                        };
                        events.push(event);
                    }
                }
            });

            const uniqueEvents = this.removeDuplicateEvents(events);
            console.log(`✅ Circle Line: Found ${uniqueEvents.length} events`);
            return uniqueEvents;

        } catch (error) {
            console.error(`❌ Error scraping ${this.venueName}:`, error.message);
            return [];
        }
    }

    /**
     * Remove duplicate events based on title
     * @param {Array} events - Array of event objects
     * @returns {Array} Deduplicated events
     */
    removeDuplicateEvents(events) {
        const seen = new Set();
        return events.filter(event => {
            const key = event.title.toLowerCase().trim();
            if (seen.has(key)) {
                return false;
            }
            seen.add(key);
            return true;
        });
    }

    /**
     * Check if the extracted text represents a valid event
     * @param {string} title - Event title to validate
     * @returns {boolean} Whether the title appears to be a valid event
     */
    isValidEvent(title) {
        if (!title || title.length < 5 || title.length > 200) return false;
        
        const invalidKeywords = [
            'home', 'about', 'contact', 'privacy', 'terms', 'cookie', 
            'newsletter', 'subscribe', 'follow', 'social', 'menu',
            'navigation', 'search', 'login', 'register', 'sign up',
            'facebook', 'twitter', 'instagram', 'youtube', 'linkedin',
            'more info', 'read more', 'learn more', 'view all',
            'click here', 'find out', 'discover', 'buy tickets',
            'purchase', 'checkout', 'cart', 'book now'
        ];
        
        const titleLower = title.toLowerCase();
        return !invalidKeywords.some(keyword => titleLower.includes(keyword));
    }

    /**
     * Get venue information
     * @returns {Object} Venue details
     */
    getVenueInfo() {
        return {
            name: this.venueName,
            location: this.venueLocation,
            category: this.category,
            website: this.baseUrl
        };
    }
}


// Function export for compatibility with runner/validator
module.exports = async (city) => {
  const scraper = new CircleLineEvents();
  return await scraper.scrape(city);
};

// Also export the class for backward compatibility
module.exports.CircleLineEvents = CircleLineEvents;
