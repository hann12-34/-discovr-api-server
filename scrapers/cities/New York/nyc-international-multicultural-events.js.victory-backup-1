const { getCityFromArgs } = require('../../utils/city-util.js');
/**
 * NYC International & Multicultural Events Scraper
 * 
 * Scrapes international and multicultural events from NYC cultural centers, embassies, and community venues
 * URL: https://www.eventbrite.com/d/ny--new-york/other/
 */

const axios = require('axios');
const cheerio = require('cheerio');

class NYCInternationalMulticulturalEvents {
    constructor() {
        this.venueName = 'NYC International & Multicultural Events';
        this.venueLocation = 'Various NYC Cultural Centers, Embassies & Community Venues';
        this.baseUrl = 'https://www.eventbrite.com';
        this.eventsUrl = 'https://www.eventbrite.com/d/ny--new-york/other/';
        this.category = 'International & Multicultural';
    }

    /**
     * Scrape events from NYC International & Multicultural Events
     * @returns {Promise<Array>} Array of event objects
     */
    async scrape() {
        console.log(`🌍 Scraping events from ${this.venueName}...`);
        
        try {
            const response = await axios.get(this.eventsUrl, {
                headers: {
                    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
                    'Accept-Language': 'en-US,en;q=0.9',
                    'Accept-Encoding': 'gzip, deflate, br',
                    'Cache-Control': 'max-age=0',
                    'sec-ch-ua': '"Not_A Brand";v="8", "Chromium";v="120", "Google Chrome";v="120"',
                    'sec-ch-ua-mobile': '?0',
                    'sec-ch-ua-platform': '"macOS"',
                    'sec-fetch-dest': 'document',
                    'sec-fetch-mode': 'navigate',
                    'sec-fetch-site': 'none',
                    'sec-fetch-user': '?1',
                    'upgrade-insecure-requests': '1',
                    'Referer': 'https://www.google.com/',
                    'DNT': '1',
                    'Connection': 'keep-alive'
                },
                timeout: 15000
            });

            const $ = cheerio.load(response.data);
            const events = [];

            // Look for international/multicultural-specific event containers
            const eventSelectors = [
                '.international-event', '.multicultural-event', '.cultural-event',
                '.event-item', '.event-card', '.event', '.embassy-event',
                '[class*="international"]', '[class*="multicultural"]', '[class*="event"]',
                '.card', '.content-card', '.ethnic-event', '.heritage-event'
            ];

            eventSelectors.forEach(selector => {
                $(selector).each((index, element) => {
                    const $el = $(element);
                    let title = $el.find('h1, h2, h3, h4, .title, .event-title, .cultural-title, .name, .headline').first().text().trim();
                    
                    if (!title) {
                        const textContent = $el.text().trim();
                        const lines = textContent.split('\n').filter(line => line.trim().length > 0);
                        title = lines[0]?.trim() || '';
                    }

                    if (title && this.isValidEvent(title)) {
                        // Look for event date/time
                        let dateTime = '';
                        const dateSelectors = [
                            '.date', '.datetime', '[class*="date"]', 
                            'time', '.when', '.schedule', '.event-time', '.cultural-time'
                        ];
                        
                        for (const dateSelector of dateSelectors) {
                            const dateElement = $el.find(dateSelector).first();
                            if (dateElement.length > 0) {
                                dateTime = dateElement.text().trim();
                                if (dateTime && dateTime.length < 150) break;
                            }
                        }

                        // Look for venue/cultural center/embassy
                        let venue = this.venueLocation;
                        const venueSelectors = ['.venue', '.cultural-center', '.embassy', '[class*="venue"]', '.location', '.consulate'];
                        for (const venueSelector of venueSelectors) {
                            const venueElement = $el.find(venueSelector).first();
                            if (venueElement.length > 0) {
                                const venueText = venueElement.text().trim();
                                if (venueText && venueText.length > 0) {
                                    venue = venueText.length > 70 ? venueText.substring(0, 70) + '...' : venueText;
                                    break;
                                }
                            }
                        }

                        // Look for country/culture
                        let country = '';
                        const countrySelectors = ['.country', '.culture', '.origin', '[class*="country"]'];
                        for (const countrySelector of countrySelectors) {
                            const countryElement = $el.find(countrySelector).first();
                            if (countryElement.length > 0) {
                                const countryText = countryElement.text().trim();
                                if (countryText && countryText.match(/\b(Chinese|Japanese|Korean|Indian|Italian|French|German|Russian|Brazilian|Mexican)\b/i)) {
                                    country = countryText;
                                    break;
                                }
                            }
                        }

                        // Look for language
                        let language = '';
                        const languageSelectors = ['.language', '.spoken-in', '.native-language', '[class*="language"]'];
                        for (const languageSelector of languageSelectors) {
                            const languageElement = $el.find(languageSelector).first();
                            if (languageElement.length > 0) {
                                const languageText = languageElement.text().trim();
                                if (languageText && languageText.match(/\b(English|Spanish|Mandarin|French|Arabic|Hindi|Russian|Portuguese)\b/i)) {
                                    language = languageText;
                                    break;
                                }
                            }
                        }

                        // Look for cultural category
                        let culturalCategory = this.category;
                        const categorySelectors = ['.cultural-category', '.event-type', '.tradition-type', '[class*="category"]'];
                        for (const categorySelector of categorySelectors) {
                            const categoryElement = $el.find(categorySelector).first();
                            if (categoryElement.length > 0) {
                                const categoryText = categoryElement.text().trim();
                                if (categoryText && categoryText.length > 0) {
                                    culturalCategory = categoryText;
                                    break;
                                }
                            }
                        }

                        // Look for traditional food/cuisine
                        let cuisine = '';
                        const cuisineSelectors = ['.cuisine', '.food', '.traditional-food', '[class*="cuisine"]'];
                        for (const cuisineSelector of cuisineSelectors) {
                            const cuisineElement = $el.find(cuisineSelector).first();
                            if (cuisineElement.length > 0) {
                                cuisine = cuisineElement.text().trim();
                                if (cuisine) break;
                            }
                        }

                        // Look for traditional performances/arts
                        let performances = '';
                        const performanceSelectors = ['.performances', '.traditional-arts', '.dance', '[class*="performance"]'];
                        for (const performanceSelector of performanceSelectors) {
                            const performanceElement = $el.find(performanceSelector).first();
                            if (performanceElement.length > 0) {
                                performances = performanceElement.text().trim();
                                if (performances) break;
                            }
                        }

                        // Look for cultural significance/history
                        let significance = '';
                        const significanceSelectors = ['.significance', '.history', '.cultural-meaning', '[class*="significance"]'];
                        for (const significanceSelector of significanceSelectors) {
                            const significanceElement = $el.find(significanceSelector).first();
                            if (significanceElement.length > 0) {
                                significance = significanceElement.text().trim();
                                if (significance) break;
                            }
                        }

                        // Look for dress code/traditional attire
                        let attire = '';
                        const attireSelectors = ['.attire', '.dress-code', '.traditional-clothing', '[class*="attire"]'];
                        for (const attireSelector of attireSelectors) {
                            const attireElement = $el.find(attireSelector).first();
                            if (attireElement.length > 0) {
                                attire = attireElement.text().trim();
                                if (attire) break;
                            }
                        }

                        // Look for admission/donation
                        let admission = '';
                        const admissionSelectors = ['.admission', '.donation', '.cost', '[class*="admission"]'];
                        for (const admissionSelector of admissionSelectors) {
                            const admissionElement = $el.find(admissionSelector).first();
                            if (admissionElement.length > 0) {
                                const admissionText = admissionElement.text().trim();
                                if (admissionText && (admissionText.includes('$') || admissionText.toLowerCase().includes('free'))) {
                                    admission = admissionText;
                                    break;
                                }
                            }
                        }

                        // Look for community/organization
                        let organization = '';
                        const orgSelectors = ['.organization', '.community', '.association', '[class*="organization"]'];
                        for (const orgSelector of orgSelectors) {
                            const orgElement = $el.find(orgSelector).first();
                            if (orgElement.length > 0) {
                                organization = orgElement.text().trim();
                                if (organization) break;
                            }
                        }

                        // Look for cultural workshops/activities
                        let workshops = '';
                        const workshopSelectors = ['.workshops', '.activities', '.classes', '[class*="workshop"]'];
                        for (const workshopSelector of workshopSelectors) {
                            const workshopElement = $el.find(workshopSelector).first();
                            if (workshopElement.length > 0) {
                                workshops = workshopElement.text().trim();
                                if (workshops) break;
                            }
                        }

                        // Look for cultural exhibits/displays
                        let exhibits = '';
                        const exhibitSelectors = ['.exhibits', '.displays', '.showcase', '[class*="exhibit"]'];
                        for (const exhibitSelector of exhibitSelectors) {
                            const exhibitElement = $el.find(exhibitSelector).first();
                            if (exhibitElement.length > 0) {
                                exhibits = exhibitElement.text().trim();
                                if (exhibits) break;
                            }
                        }

                        // Look for age/audience
                        let audience = '';
                        const audienceSelectors = ['.audience', '.age-group', '.for', '[class*="audience"]'];
                        for (const audienceSelector of audienceSelectors) {
                            const audienceElement = $el.find(audienceSelector).first();
                            if (audienceElement.length > 0) {
                                const audienceText = audienceElement.text().trim();
                                if (audienceText && audienceText.match(/\b(families|adults|children|all ages)\b/i)) {
                                    audience = audienceText;
                                    break;
                                }
                            }
                        }

                        // Look for description
                        let description = '';
                        const descSelectors = ['.description', '.excerpt', '.summary', '.details', '.content'];
                        for (const descSelector of descSelectors) {
                            const descElement = $el.find(descSelector).first();
                            if (descElement.length > 0) {
                                description = descElement.text().trim();
                                if (description && description.length > 20 && description.length < 300) break;
                            }
                        }

                        // Look for link
                        let eventLink = $el.find('a').first().attr('href') || '';
                        if (eventLink && !eventLink.startsWith('http')) {
                            eventLink = this.baseUrl + eventLink;
                        }

                        const event = {
                            title: title,
                            venue: venue,
                            location: this.venueLocation,
                            date: dateTime || 'Check website for international/multicultural event schedule',
                            category: culturalCategory,
                            country: country,
                            language: language,
                            cuisine: cuisine,
                            performances: performances,
                            significance: significance,
                            attire: attire,
                            admission: admission,
                            organization: organization,
                            workshops: workshops,
                            exhibits: exhibits,
                            audience: audience,
                            description: description,
                            link: eventLink || this.eventsUrl,
                            source: 'NYCInternationalMulticulturalEvents'
                        };

                        events.push(event);
                    }
                });
            });

            // Look for general international/multicultural information
            $('div, section, article, p').each((index, element) => {
                if (index > 100) return false; // Limit processing
                
                const $el = $(element);
                const text = $el.text().trim();
                
                if (text.length > 30 && text.length < 400) {
                    const hasInternationalKeywords = text.match(/\b(international|multicultural|cultural|ethnic|heritage|traditional|embassy|consulate)\b/i);
                    const hasEventPattern = text.match(/\b(event|festival|celebration|ceremony|exhibition|performance|workshop)\b/i);
                    
                    if (hasInternationalKeywords && hasEventPattern) {
                        const sentences = text.split('.').filter(sentence => sentence.trim().length > 15);
                        const title = sentences[0]?.trim() || '';
                        
                        if (title && this.isValidEvent(title) && title.length > 20) {
                            const event = {
                                title: title.length > 150 ? title.substring(0, 150) + '...' : title,
                                venue: this.venueName,
                                location: this.venueLocation,
                                date: 'Check website for international/multicultural event schedule',
                                category: this.category,
                                link: this.eventsUrl,
                                source: 'NYCInternationalMulticulturalEvents'
                            };

                            events.push(event);
                        }
                    }
                }
            });

            // Remove duplicates
            const uniqueEvents = this.removeDuplicateEvents(events);

            console.log(`✅ ${this.venueName}: Found ${uniqueEvents.length} events`);
            return uniqueEvents;

        } catch (error) {
            console.error(`❌ Error scraping ${this.venueName}:`, error.message);
            return [];
        }
    }

    /**
     * Remove duplicate events based on title and venue
     * @param {Array} events - Array of event objects
     * @returns {Array} Deduplicated events
     */
    removeDuplicateEvents(events) {
        const seen = new Set();
        return events.filter(event => {
            const key = `${event.title}-${event.venue}`.toLowerCase();
            if (seen.has(key)) {
                return false;
            }
            seen.add(key);
            return true;
        });
    }

    /**
     * Check if the extracted text represents a valid event
     * @param {string} title - Event title to validate
     * @returns {boolean} Whether the title appears to be a valid event
     */
    isValidEvent(title) {
        if (!title || title.length < 8 || title.length > 200) return false;
        
        const invalidKeywords = [
            'home', 'about', 'contact', 'privacy', 'terms', 'cookie', 
            'newsletter', 'subscribe', 'follow', 'social media', 'menu',
            'navigation', 'search', 'login', 'register', 'sign up',
            'facebook', 'twitter', 'instagram', 'youtube', 'linkedin',
            'more info', 'read more', 'learn more', 'view all',
            'click here', 'find out', 'discover', 'directions'
        ];
        
        // Check for valid international/multicultural keywords
        const validKeywords = [
            'international', 'multicultural', 'cultural', 'ethnic', 'heritage',
            'traditional', 'embassy', 'consulate', 'event', 'festival',
            'celebration', 'ceremony', 'exhibition', 'performance', 'workshop'
        ];
        
        const titleLower = title.toLowerCase();
        const hasValidKeyword = validKeywords.some(keyword => titleLower.includes(keyword));
        const hasInvalidKeyword = invalidKeywords.some(keyword => titleLower.includes(keyword));
        
        return hasValidKeyword && !hasInvalidKeyword;
    }

    /**
     * Get venue information
     * @returns {Object} Venue details
     */
    getVenueInfo() {
        return {
            name: this.venueName,
            location: this.venueLocation,
            category: this.category,
            website: this.baseUrl
        };
    }
}


// Function export for compatibility with runner/validator
module.exports = async (city) => {
  const scraper = new NYCInternationalMulticulturalEvents();
  return await scraper.scrape(city);
};

// Also export the class for backward compatibility
module.exports.NYCInternationalMulticulturalEvents = NYCInternationalMulticulturalEvents;
