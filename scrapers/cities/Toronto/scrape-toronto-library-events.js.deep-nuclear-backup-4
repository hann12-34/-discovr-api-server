const axios = require('axios');
const { MongoClient } = require('mongodb');
const { getCityFromArgs, generateEventId, extractCategories } = require('../../utils/city-util');

const API_URL = 'https://www.torontopubliclibrary.ca/xapi/search/v1/events?q=*&limit=50';

async function scrapeTorontoLibraryEvents(city) {
  const mongoURI = process.env.MONGODB_URI;
  const client = new MongoClient(mongoURI);

  try {
    await client.connect();
    const eventsCollection = client.db('s');
    console.log('🚀 Scraping Toronto Public Library events...');

    let events = [];
    let page = 0;
    let totalResults = 0;

    do {
      const { data } = await axios.get(`${API_URL}&page=${page}`);
      if (page === 0) {
        totalResults = data.result.total;
      }
      events.push(...data.result.hits);
      page++;
    } while (events.length < totalResults);

    let addedEvents = 0;
    for (const event of events) {
      try {
        const details = event.detail;
        const title = details.title.text || details.title.main;
        const startDate = new Date(details.startDate);
        const eventId = generateEventId(title, startDate);

        const venue = {
          name: details.location.name || 'Toronto Public Library',
          address: `${details.location.address.street}, ${details.location.address.city}, ${details.location.address.province} ${details.location.address.postalCode}`.trim(),
          city: city,
          state: 'ON',
          zip: details.location.address.postalCode,
          latitude: details.location.latitude,
          longitude: details.location.longitude
        };

        const formattedEvent = {
          id: eventId,
          title: title,
          description: details.description,
          categories: extractCategories(title, details.description),
          startDate: startDate,
          endDate: new Date(details.endDate),
          venue: venue,
          imageUrl: details.thumbnail,
          url: `https://www.torontopubliclibrary.ca${details.url}`,
          price: 'Free',
          source: 'Toronto Public Library',
          lastUpdated: new Date()
        };

        const existingEvent = await eventsCollection.findOne({
          $or: [
            { id: formattedEvent.id },
            {
              title: formattedEvent.title,
              startDate: formattedEvent.startDate
            }
          ]
        };

        if (!existingEvent) {
          await eventsCollection.insertOne(formattedEvent);
          addedEvents++;
          console.log(`✅ Added event: ${formattedEvent.title}`);
        } else {
          console.log(`⏭️ Skipped duplicate event: ${formattedEvent.title}`);
        }
      } catch (error) {
        console.error(`❌ Error processing event "${event.detail.title.text}":`, error);
      }
    }

    console.log(`📊 Successfully added ${addedEvents} new Toronto Public Library events`);
    return events;
  } catch (error) {
    console.error('❌ Error scraping Toronto Public Library events:', error);
    return [];
  } finally {
    if (client) {
      await client.close();
    }
  }
}

(async () => {
  const city = city;
  if (city) {
    await scrapeTorontoLibraryEvents(city);
  } else {
    console.log('No city provided. Ending script.');
  }
}();

// Async function export added by targeted fixer


// DEEP NUCLEAR EXPORT FIX - ITERATION 2

    try {
        return await scrapeTorontoLibraryEvents(city || 'Toronto');
    } catch (error) {
        console.error('Deep nuclear fix error:', error);
        return [];
    }
};

// DEEP NUCLEAR EXPORT FIX - ITERATION 3
module.exports = async (city) => {
    try {
        return await scrapeTorontoLibraryEvents(city || 'Toronto');
    } catch (error) {
        console.error('Deep nuclear fix error:', error);
        return [];
    }
};