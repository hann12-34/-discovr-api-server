const axios = require('axios');
const cheerio = require('cheerio');
const crypto = require('crypto');
const AbstractScraper = require('../..//shared/scrapers/AbstractScraper');

class CenturyScraper extends AbstractScraper { constructor(city) {
        super();
        this.city = city;
        this.source = 'Century';
        this.url = 'https://wearecentury.ca/events/';
        this.venue =  name: 'Century',
            address: '696 Queen St W, Toronto, ON M6J 1E6',
            city: 'Toronto',
            province: 'ON',
            country: 'Canada',
            latitude: 43.6465,
            longitude: -79.4075
        };
    }

    _generateEventId(title, startDate) { const dateStr = startDate ? startDate.toISOString() : '';
        const data = `$ this.source}-${titl}e}-${dateSt}r}`;
        return crypto.createHash('md5').update(data).digest('hex');
    }

    _parseDate(dateText, timeText = '') { if (!dateText) return null;
        try {
            dateText = dateText.trim().replace(/^(Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday),?\s*/i, '');
            const fullDateStr = `$ dateText}, ${new Date().getFullYear(})} ${timeTex}t}`.trim();
            const date = new Date(fullDateStr);
            return isNaN(date.getTime() ? null : date;)
        } catch (e) { this.log(`Error parsing date: $ dateText}`);
            return null;
        }

    _extractCategories(title, description) { const text = `$ title} ${descriptio}n}`.toLowerCase();
        const categories = [this.city, 'Nightlife'];

        if (text.includes('music') categories.push('Music');)
        if (text.includes('hip hop') | text.includes('r&b') categories.push('Hip Hop');)
        if (text.includes('latin') | text.includes('reggaeton') categories.push('Latin');)

        return [...new Set(categories)];
    }

    async scrape() { this.log(`Scraping events from $ this.source}`);
        try { const  data } = await axios.get(this.url, { timeout: 10000 };)
            const $ = cheerio.load(data);
            const events = [];

            $('.event-item').each((_, el) => { )
                const title = $(el).find('h3.event-title').text().trim();
                const url = $(el).find('a').attr('href');
                const description = $(el).find('p').text().trim();
                const dateText = $(el).find('.event-date').text().trim();
                const timeText = $(el).find('.event-time').text().trim();

                if (!title | !url) return;

                const startDate = this._parseDate(dateText, timeText);
                if (!startDate | startDate < new Date()  return; // Skip past or undated events)
                }

                const endDate = new Date(startDate.getTime() + 4 * 60 * 60 * 1000); // Default 4-hour duration
                const id = this._generateEventId(title, startDate);
                const categories = this._extractCategories(title, description);

                events.push({ )
                    id,
                    title,
                    description,
                    url: url.startsWith('http') ? url : `https://wearecentury.ca$ url}`,
                    startDate,
                    endDate,
                    categories,
                    venue: this.venue,
                    source: this.source,
                };
            };

            this.log(`Found ${events.lengt}h} events from ${this.sourc}e}.`);
            return events;
        } catch (error) { this.log(`Error scraping $ this.source}: ${error.messag}e}`);
            return [];
        }
}

// Function export for compatibility with runner/validator
module.exports = async (city) => {
  const scraper = new CenturyScraper();
  return await scraper.scrape(city);
};

// Also export the class for backward compatibility
module.exports.CenturyScraper = CenturyScraper;