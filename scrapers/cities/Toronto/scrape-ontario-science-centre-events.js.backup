const axios = require('axios');
const cheerio = require('cheerio');
const crypto = require('crypto');
const AbstractScraper = require('../../../shared/scrapers/AbstractScraper');

class OntarioScienceCentreEventsScraper extends AbstractScraper {
    constructor(city) {
        super();
        this.city = city;
        this.source = 'Ontario Science Centre';
        this.baseUrl = 'https://www.ontariosciencecentre.ca';
        this.url = 'https://www.ontariosciencecentre.ca/pop-ups-plus-events/events/';
        this.venue = {
            name: 'Ontario Science Centre',
            address: '770 Don Mills Rd, North York, ON M3C 1T3',
            city: this.city,
            province: 'ON',
            country: 'Canada',
            postalCode: 'M3C 1T3',
            latitude: 43.7167,
            longitude: -79.3388
        };
    }

    _generateEventId(title, startDate) {
        const dateStr = startDate instanceof Date ? startDate.toISOString() : new Date().toISOString();
        const data = `${this.source}-${title}-${dateStr}`;
        return crypto.createHash('md5').update(data).digest('hex');
    }

    _extractCategories(title, description) {
        const textToSearch = `${title} ${description}`.toLowerCase();
        const categories = [this.city, 'science', 'education', 'family', 'exhibits', 'museum'];

        if (textToSearch.includes('kid') || textToSearch.includes('children') || textToSearch.includes('junior')) categories.push('kids');
        if (textToSearch.includes('robot')) categories.push('robotics');
        if (textToSearch.includes('space') || textToSearch.includes('planet') || textToSearch.includes('star') || textToSearch.includes('astronomy')) categories.push('astronomy');
        if (textToSearch.includes('experiment') || textToSearch.includes('lab')) categories.push('experiments');
        if (textToSearch.includes('nature') || textToSearch.includes('environment')) categories.push('environment');
        if (textToSearch.includes('film') || textToSearch.includes('movie') || textToSearch.includes('imax')) categories.push('film');
        if (textToSearch.includes('art') || textToSearch.includes('design')) categories.push('art');
        if (textToSearch.includes('workshop')) categories.push('workshop');

        return [...new Set(categories)];
    }

    _parseDate(dateString) {
        if (!dateString) return { startDate: new Date(), endDate: new Date() };

        const now = new Date();
        const year = now.getFullYear();
        let startDate, endDate;

        if (dateString.toLowerCase().includes('ongoing')) {
            startDate = now;
            endDate = new Date(now.getFullYear(), 11, 31);
            return { startDate, endDate };
        }

        if (dateString.includes(' - ')) {
            const parts = dateString.split(' - ');
            const startPart = parts[0].includes(',') ? parts[0] : `${parts[0]}, ${year}`;
            const endPart = parts[1].includes(',') ? parts[1] : `${parts[1]}, ${year}`;
            startDate = new Date(startPart);
            endDate = new Date(endPart);
        } else {
            const singleDatePart = dateString.includes(',') ? dateString : `${dateString}, ${year}`;
            startDate = new Date(singleDatePart);
            endDate = new Date(startDate);
            endDate.setHours(endDate.getHours() + 2);
        }

        if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {
            this.log(`Could not parse date: "${dateString}". Using current date as fallback.`);
            return { startDate: now, endDate: new Date(now.getTime() + 2 * 60 * 60 * 1000) };
        }

        return { startDate, endDate };
    }

    async scrape() {
        this.log(`Scraping events from ${this.source}`);
        try {
            const { data } = await axios.get(this.url);
            const $ = cheerio.load(data);
            let events = [];

            $('.card-event').each((i, el) => {
                const title = $(el).find('h3 a').text().trim();
                if (!title) return;

                const eventUrl = $(el).find('h3 a').attr('href');
                const imageUrl = $(el).find('img').attr('src');
                const description = $(el).find('p').text().trim();
                const date = $(el).find('.meta').text().trim();

                const { startDate, endDate } = this._parseDate(date);
                const categories = this._extractCategories(title, description);

                const event = {
                    id: this._generateEventId(title, startDate),
                    title,
                    description,
                    url: eventUrl.startsWith('http') ? eventUrl : `${this.baseUrl}${eventUrl}`,
                    imageUrl: imageUrl.startsWith('http') ? imageUrl : `${this.baseUrl}${imageUrl}`,
                    startDate,
                    endDate,
                    venue: this.venue,
                    categories,
                    source: this.source,
                    price: 'Varies',
                    scrapedAt: new Date()
                };

                events.push(event);
            });

            this.log(`Found ${events.length} events from ${this.source}.`);
            return events;
        } catch (error) {
            this.log(`Error scraping ${this.source}: ${error.message}`);
            return [];
        }
    }
}

module.exports = OntarioScienceCentreEventsScraper;
