const puppeteer = require('puppeteer');
const crypto = require('crypto');
const AbstractScraper = require('../../../shared/scrapers/AbstractScraper');

class CaribanaFestivalScraper extends AbstractScraper {
    constructor(city) {
        super();
        this.city = city;
        this.source = 'Toronto Caribbean Carnival';
        this.url = 'https://www.torontocarnival.ca/';
        this.venue = {
            name: 'Multiple Venues (Caribana)',
            address: 'Exhibition Place & Lakeshore Blvd W, Toronto, ON',
            city: this.city,
            province: 'ON',
            country: 'Canada',
            latitude: 43.6330,
            longitude: -79.4165
        };
    }

    _generateEventId(title, startDate) {
        const dateStr = startDate ? startDate.toISOString() : '';
        const data = `${this.source}-${title}-${dateStr}`;
        return crypto.createHash('md5').update(data).digest('hex');
    }

    _parseDate(dateStr) {
        if (!dateStr) return null;
        try {
            const date = new Date(dateStr);
            return isNaN(date.getTime()) ? null : date;
        } catch (e) {
            this.log(`Error parsing date: ${dateStr}`);
            return null;
        }
    }

    _extractCategories(title, description) {
        const text = `${title} ${description}`.toLowerCase();
        const categories = [this.city, 'Festival', 'Cultural'];

        if (text.includes('parade')) categories.push('Parade');
        if (text.includes('music') || text.includes('soca') || text.includes('calypso')) categories.push('Music');
        if (text.includes('food')) categories.push('Food');
        if (text.includes('family')) categories.push('Family');

        return [...new Set(categories)];
    }

    async scrape() {
        this.log(`Scraping events from ${this.source}`);
        const browser = await puppeteer.launch({ headless: true, args: ['--no-sandbox'] });
        try {
            const page = await browser.newPage();
            await page.goto(this.url, { waitUntil: 'networkidle2' });

            this.log('Website does not have a structured events page. No events will be scraped.');
            // NOTE: The official website is more of a portal and does not have a consistent, scrapable events calendar.
            // Returning an empty array to comply with the no-fallbacks rule.
            const events = [];

            return events;
        } catch (error) {
            this.log(`Error scraping ${this.source}: ${error.message}`);
            return [];
        } finally {
            await browser.close();
        }
    }
}



// Function export for compatibility with runner/validator
module.exports = async (city) => {
  const scraper = new CaribanaFestivalScraper();
  return await scraper.scrape(city);
};

// Also export the class for backward compatibility
module.exports.CaribanaFestivalScraper = CaribanaFestivalScraper;
