const axios = require('axios');
const cheerio = require('cheerio');
const crypto = require('crypto');
const AbstractScraper = require('../../../shared/scrapers/AbstractScraper');

class CNTowerScraper extends AbstractScraper {
    constructor(city) {
        super();
        this.city = city;
        this.source = 'CN Tower';
        this.url = 'https://www.cntower.ca/lighting-schedule';
        this.venue = {
            name: 'CN Tower',
            address: '290 Bremner Blvd, Toronto, ON M5V 3L9',
            city: this.city,
            province: 'ON',
            country: 'Canada',
            latitude: 43.6426,
            longitude: -79.3871,
            website: 'https://www.cntower.ca/'
        };
    }

    _generateEventId(title, startDate) {
        const dateStr = startDate ? startDate.toISOString().split('T')[0] : 'nodate';
        const data = `${this.source}-${title}-${dateStr}`;
        return crypto.createHash('md5').update(data).digest('hex');
    }

    _parseDate(dateStr) {
        if (!dateStr) return null;
        try {
            const date = new Date(dateStr);
            return isNaN(date.getTime()) ? null : date;
        } catch (e) {
            this.log(`Error parsing date: ${dateStr}`);
            return null;
        }
    }

    _getMonthNumber(monthName) {
        const months = {
            'Jan': 1, 'Feb': 2, 'Mar': 3, 'Apr': 4, 'May': 5, 'Jun': 6,
            'Jul': 7, 'Aug': 8, 'Sep': 9, 'Oct': 10, 'Nov': 11, 'Dec': 12
        };
        return months[monthName.substring(0, 3)];
    }

    _extractCategories(title, description) {
        const text = `${title} ${description}`.toLowerCase();
        const categories = [this.city, 'Attraction'];
        const categoryMap = {
            'Dining': [/dining|restaurant|360/],
            'Adventure': [/edgewalk|adventure|thrill/],
            'Observation': [/observation|deck|glass floor/],
            'Special Event': [/event|celebration|gala|fundraiser/],
            'Holiday': [/holiday|christmas|new year/],
            'Music': [/music|concert/]
        };

        for (const [category, keywords] of Object.entries(categoryMap)) {
            if (keywords.some(keyword => keyword.test(text))) {
                categories.push(category);
            }
        }

        return [...new Set(categories)];
    }

    async scrape() {
        this.log(`Scraping events from ${this.source}`);
        try {
            const { data } = await axios.get(this.url, { timeout: 15000 });
            const $ = cheerio.load(data);
            const events = [];
            const currentYear = new Date().getFullYear();

            $('.view-lighting-schedule .upcoming-lightings.views-row').each((i, el) => {
                const title = $(el).find('h3 .field--name-title').text().trim();
                const monthStr = $(el).find('.date .month').text().trim();
                const day = $(el).find('.date .day').text().trim();

                if (title && monthStr && day) {
                    const month = this._getMonthNumber(monthStr);
                    if (month) {
                        const startDate = new Date(`${currentYear}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')}`);
                        if (startDate < new Date()) {
                            return; // Skip past events
                        }

                        const id = this._generateEventId(title, startDate);
                        const categories = this._extractCategories(title, '');

                        events.push({
                            id,
                            title,
                            description: `A special lighting event at the CN Tower: ${title}`,
                            url: this.url,
                            imageUrl: null,
                            startDate,
                            endDate: new Date(startDate.getTime() + 2 * 60 * 60 * 1000), // Assume 2-hour duration
                            categories,
                            venue: this.venue,
                            source: this.source,
                        });
                    }
                }
            });

            this.log(`Found ${events.length} events from ${this.source}.`);
            return events;
        } catch (error) {
            this.log(`Error scraping ${this.source}: ${error.message}`);
            return [];
        }
    }
}

module.exports = CNTowerScraper;
