const { getCityFromArgs } = require('../../utils/city-util.js');

async function fetchEventsFromURL(eventsCollection, processedEventIds) {
  try {
    console.log(`üîç Fetching events from ${GERRARD_EVENTS_URL}...`);
    const response = await axios.get(GERRARD_EVENTS_URL, { timeout: 30000 });
    const html = response.data;
    const $ = cheerio.load(html);
    
    let addedEvents = 0;
    
    // Different approach: Parse the entire page text and extract events
    console.log('üìã Parsing entire page content...');
    
    const pageText = $('body').text();
    console.log(`Page text length: ${pageText.length}`);
    
    // Split content by event titles and process each section
    const eventTitles = [
      'Tree Lighting',
      'Diwali Mela', 
      'Festival of South Asia',
      'Ramadan Iftar Trail',
      'Baisakhi Mela',
      'Santa in the Bazaar',
      'Ramadan and EID Mela',
      'LIVE Garba at the Bazaar'
    ];
    
    for (const title of eventTitles) {
      try {
        console.log(`üîç Processing event: "${title}"`);
        
        // Find the section for this event
        const titleIndex = pageText.indexOf(title);
        if (titleIndex === -1) {
          console.log(`‚ö†Ô∏è Could not find "${title}" in page text`);
          continue;
        }
        
        // Get text after the title (next 1000 characters)
        const sectionText = pageText.substring(titleIndex, titleIndex + 1000);
        console.log(`üîç Section text: ${sectionText.substring(0, 300)}...`);
        
        let description = '';
        let dateText = '';
        let eventUrl = '';
        
        // Extract description (clean up the section text)
        description = sectionText.replace(title, '').trim();
        
        // Look for date patterns in the section text
        const datePatterns = [
          // "Saturday November 22nd, 2025"
          /(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday)\s+([A-Za-z]+\s+\d{1,2}(?:st|nd|rd|th)?\s*,?\s*\d{4})/i,
          // "November 22nd, 2025" or "OCTOBER 18, 2025"
          /([A-Za-z]+\s+\d{1,2}(?:st|nd|rd|th)?\s*,?\s*\d{4})/i,
          // "April 6, 2024"
          /([A-Za-z]+\s+\d{1,2}\s*,?\s*\d{4})/i,
          // "February 10-12, 2023"
          /([A-Za-z]+\s+\d{1,2}\s*-\s*\d{1,2}\s*,?\s*\d{4})/i,
          // "Save-The-Date: OCTOBER 18, 2025"
          /Save-The-Date:\s*([A-Z]+\s+\d{1,2}\s*,?\s*\d{4})/i,
          // "Join us on April 6, 2024"
          /Join us on\s+([A-Za-z]+\s+\d{1,2}\s*,?\s*\d{4})/i,
          // "Held in October" - month only
          /Held in\s+([A-Za-z]+)/i
        ];
        
        for (const pattern of datePatterns) {
          const match = sectionText.match(pattern);
          if (match && !dateText) {
            dateText = match[1];
            console.log(`üîç Found date "${dateText}" for "${title}"`);
            break;
          }
        }
        
        // Look for event detail links
        const linkMatch = sectionText.match(/Event Details Here\]\(([^)]+)\)/);
        if (linkMatch) {
          eventUrl = linkMatch[1];
        }
        
        // Clean up description
        description = description.replace(/Event Details Here.*$/, '').trim();
        
        // Process the event if we have the required information
        if (title && dateText) {
          const success = await processEventCandidate(
            title,
            dateText,
            description,
            eventUrl,
            eventsCollection,
            processedEventIds
          );
          
          if (success) addedEvents++;
        } else {
          console.log(`‚ö†Ô∏è Skipping "${title}" - missing date information`);
        }
        
      } catch (error) {
        console.error(`Error processing event "${title}": ${error.message}`);
      }
    }
    
    console.log(`üìä Successfully added ${addedEvents} new Gerrard India Bazaar events`);
    return addedEvents;
    
  } catch (error) {
    console.error(`‚ùå Error fetching events: ${error.message}`);
    return 0;
  }
}

/**
 * Main function to scrape Gerrard India Bazaar events
 * @returns {Promise<void>}
 */
async function scrapeGerrardEvents() {
  const client = new MongoClient(uri);
  
  try {
    console.log('üîó Connecting to MongoDB...');
    await client.connect();
    
    const db = client.db('discovr');
    const eventsCollection = dbs');
    
    console.log('üöÄ Starting Gerrard India Bazaar event scraping...');
    
    const processedEventIds = new Set();
    const addedEvents = await fetchEventsFromURL(eventsCollection, processedEventIds);
    
    console.log(`\nüìà Scraping completed!`);
    console.log(`üìä Total events processed: ${processedEventIds.size}`);
    console.log(`‚úÖ New events added: ${addedEvents}`);
    
  } catch (error) {
    console.error(`‚ùå Error in scrapeGerrardEvents: ${error.message}`);
  } finally {
    await client.close();
    console.log('üîå MongoDB connection closed');
  }
}

// Export for use in other modules
module.exports = { scrapeGerrardEvents };

// Run the scraper if this file is executed directly
if (require.main === module) {
  scrapeGerrardEvents().catch(console.error);
}


// Async function export added by targeted fixer
module.exports = scrapeGerrardEvents;