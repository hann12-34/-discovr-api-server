const { getCityFromArgs } = require('../../utils/city-util.js');

    parseDate(dateString) {
        if (!dateString) return null;
        
        try {
            const date = new Date(dateString);
            if (!isNaN(date.getTime())) {
                return date.toISOString();
            }
            
            // If standard parsing fails, try different approaches
            // For example, "July 15" might need current year added
            const now = new Date();
            const withCurrentYear = `${dateString}, ${now.getFullYear()}`;
            const dateWithYear = new Date(withCurrentYear);
            
            if (!isNaN(dateWithYear.getTime())) {
                return dateWithYear.toISOString();
            }
            
            console.log(`Could not parse date: ${dateString}`);
            return null;
            
        } catch (error) {
            console.error(`❌ Error parsing date "${dateString}":`, error.message);
            return null;
        }
    }
    
    /**
     * Normalize URL (convert relative to absolute)
     * @param {string} url - URL from venue website
     * @returns {string} Normalized URL
     */
    normalizeUrl(url) {
        if (!url) return '';
        
        if (url.startsWith('http')) {
            return url;
        }
        
        return `${this.baseUrl}${url.startsWith('/') ? '' : '/'}${url}`;
    }
}

// Function export for compatibility with runner/validator
module.exports = async (city) => {
  const scraper = new RoyThomsonHallEvents();
  return await scraper.scrape(city);
};

// Also export the class for backward compatibility
module.exports.RoyThomsonHallEvents = RoyThomsonHallEvents;
