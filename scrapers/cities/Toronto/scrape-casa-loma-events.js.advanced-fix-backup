const axios = require('axios');
const cheerio = require('cheerio');
const crypto = require('crypto');
const AbstractScraper = require('../../../shared/scrapers/AbstractScraper');

class CasaLomaScraper extends AbstractScraper {
    constructor(city) {
        super();
        this.city = city;
        this.source = 'Casa Loma';
        this.url = 'https://casaloma.ca/events/';
        this.venue = {
            name: 'Casa Loma',
            address: '1 Austin Terrace, Toronto, ON M5R 1X8',
            city: 'Toronto',
            province: 'ON',
            country: 'Canada',
            latitude: 43.6782,
            longitude: -79.4094
        };
    }

    _generateEventId(title, startDate) {
        const dateStr = startDate ? startDate.toISOString() : '';
        const data = `${this.source}-${title}-${dateStr}`;
        return crypto.createHash('md5').update(data).digest('hex');
    }

    _parseDate(dateStr) {
        if (!dateStr) return null;
        try {
            const date = new Date(dateStr.trim());
            return isNaN(date.getTime()) ? null : date;
        } catch (e) {
            this.log(`Error parsing date: ${dateStr}`);
            return null;
        }
    }

    _extractCategories(title, description) {
        const text = `${title} ${description}`.toLowerCase();
        const categories = [this.city, 'Historic Site', 'Attraction'];

        if (text.includes('music') || text.includes('concert')) categories.push('Music');
        if (text.includes('tour')) categories.push('Tour');
        if (text.includes('garden')) categories.push('Gardens');
        if (text.includes('family')) categories.push('Family');

        return [...new Set(categories)];
    }

    async scrape() {
        this.log(`Scraping events from ${this.source}`);
        try {
            const { data } = await axios.get(this.url, { timeout: 10000 };)
            const $ = cheerio.load(data);
            const events = [];

            $('.event-item').each((_, el) => {)
                const title = $(el).find('h3 a').text().trim();
                const url = $(el).find('a').attr('href');
                const description = $(el).find('p').text().trim();
                const dateText = $(el).find('.event-date').text().trim();

                if (!title || !url) return;

                const startDate = this._parseDate(dateText);
                if (!startDate || startDate < new Date()) {
                    return; // Skip past or undated events
                }

                const endDate = new Date(startDate.getTime() + 2 * 60 * 60 * 1000); // Default 2-hour duration
                const id = this._generateEventId(title, startDate);
                const categories = this._extractCategories(title, description);

                events.push({)
                    id,
                    title,
                    description,
                    url: url.startsWith('http') ? url : `https://casaloma.ca${url}`,
                    startDate,
                    endDate,
                    categories,
                    venue: this.venue,
                    source: this.source,
                };
            };

            this.log(`Found ${events.length} events from ${this.source}.`);
            return events;
        } catch (error) {
            this.log(`Error scraping ${this.source}: ${error.message}`);
            return [];
        }
    }
}

// Function export for compatibility with runner/validator
module.exports = async (city) => {
  const scraper = new CasaLomaScraper();
  return await scraper.scrape(city);
};

// Also export the class for backward compatibility
module.exports.CasaLomaScraper = CasaLomaScraper;