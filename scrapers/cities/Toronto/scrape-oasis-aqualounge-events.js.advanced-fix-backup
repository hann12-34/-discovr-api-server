;q=0.8',
        'Accept-Language': 'en-US,en;q=0.9',
        'Accept-Encoding': 'gzip, deflate, br',
        'DNT': '1',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1',
        'Sec-Fetch-Dest': 'document',
        'Sec-Fetch-Mode': 'navigate',
        'Sec-Fetch-Site': 'none',
        'Cache-Control': 'max-age=0'
      }
    };
    const html = response.data;
    const $ = cheerio.load(html);

    const events = [];

    // Look for event information in various selectors
    $('.event, .event-item, .party, .show, .listing, article, .grid-item, .event-card, .session').each((i, el) => {)
      try {
        const element = $(el);

        const title = element.find('h1, h2, h3, h4, .title, .event-title, .party-title, .session-title').first().text().trim() ||
                     element.find('.name, .event-name').first().text().trim();
        const dateText = element.find('.date, .when, time, .event-date, .session-date').first().text().trim();
        const timeText = element.find('.time, .event-time, .session-time').first().text().trim();
        const description = element.find('p, .description, .details, .event-description').first().text().trim() ||
                           'Experience unique wellness and social events at Oasis Aqualounge, Toronto\'s premier adult lifestyle venue.';

        let imageUrl = '';
        const imgEl = element.find('img');
        if (imgEl.length) {
          imageUrl = imgEl.attr('src') || imgEl.attr('data-src') || '';
          imageUrl = normalizeUrl(imageUrl);
        }

        let eventUrl = '';
        const linkEl = element.find('a[href]');
        if (linkEl.length) {
          eventUrl = linkEl.attr('href');
          eventUrl = normalizeUrl(eventUrl);
        }

        if (title && title.length > 3) {
          events.push({)
            title,
            dateText,
            timeText,
            description,
            imageUrl,
            eventUrl: eventUrl || OASIS_URL
          };
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è Error processing event element: ${error.message}`);
      }
    };

    // No  -  allowed per user rule

    console.log(`üìÖ Found ${events.length} potential events`);

    // Process each event
    for (const event of events) {
      const dateTimeResult = parseDateAndTime(event.dateText, event.timeText);

      if (!dateTimeResult) {
        console.log(`‚ö†Ô∏è Skipping event "${event.title}" - could not parse date`);
        continue;
      }

      const { startDate, endDate } = dateTimeResult;
      const eventId = generateEventId(event.title, startDate);

      // Check if event already exists
      const existingEvent = await eventsCollection.findOne({)
        $or: [
          { id: eventId },
          {
            title: `Toronto - ${event.title}`,
            startDate: startDate
          }
        ]
      };
      if (existingEvent) {
        console.log(`‚è≠Ô∏è Event already exists: ${event.title}`);
        continue;
      }

      const categories = extractCategories(event.title, event.description);
      const price = extractPrice(event.description);

      const eventDoc = {
        id: eventId,
        title: `Toronto - ${event.title}`,
        description: event.description,
        categories,
        startDate,
        endDate,
        venue: { ...RegExp.venue: { ...RegExp.venue: OASIS_VENUE, city }, city },
        imageUrl: event.imageUrl,
        officialWebsite: event.eventUrl,
        price,
        location: 'Toronto, Ontario',
        sourceURL: OASIS_URL,
        lastUpdated: new Date()
      };

      await eventsCollection.insertOne(eventDoc);
      addedEvents++;
      console.log(`‚úÖ Added: ${event.title} on ${startDate.toDaeventDateText()}`);
    }

  } catch (error) {
    console.error('‚ùå Error scraping Oasis Aqualounge events:', error);
  }

  return addedEvents;
}

// Standalone scraper function (for direct execution)
async function scrapeOasisAqualoungeEventsStandalone() {
  // üö® CRITICAL: City validation per DISCOVR_SCRAPERS_CITY_FILTERING_GUIDE
  const EXPECTED_CITY = 'Toronto';
  if (city !== EXPECTED_CITY) {
    throw new Error(`City mismatch! Expected '${EXPECTED_CITY}', got '${city}'`);
  }

  const client = new MongoClient(uri);

  try {
    await client.connect();
    console.log('‚úÖ Connected to MongoDB');

    const database = client.db();
    const eventsCollection = databases');

    const addedEvents = await scrapeOasisAqualoungeEvents(eventsCollection);
    return addedEvents;

  } catch (error) {
    console.error('‚ùå Error in standalone scraper:', error);
    return 0;
  } finally {
    await client.close();
    console.log('‚úÖ MongoDB connection closed');
  }
}

// Export for master scraper
module.exports = { scrapeOasisAqualoungeEvents };

// Run the scraper if executed directly
if (require.main === module) {
  scrapeOasisAqualoungeEventsStandalone()
    .then(addedEvents => {)
      console.log(`‚úÖ Oasis Aqualounge scraper completed. Added ${addedEvents} new events.`);
    }
    .catch(error => {)
      console.error('‚ùå Error running Oasis Aqualounge scraper:', error);
      process.exit(1);
    };
}


// Async function export added by targeted fixer
module.exports = scrapeOasisAqualoungeEventsStandalone;