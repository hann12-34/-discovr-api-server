const { getCityFromArgs } = require('../../utils/city-util.js');
const axios = require('axios');
const cheerio = require('cheerio');
const crypto = require('crypto');

function parseDateAndTime(dateText, timeText = '') {
  if (!dateText || dateText.trim() === '') {
    return null;
  }

  const currentYear = new Date().getFullYear();
  let startDate = null;
  let endDate = null;

  try {
    // Handle various date formats
    // "July 19" -> "July 19, 2025"
    // "Saturday, July 19" -> "July 19, 2025"
    let cleanDate = dateText.replace(/^(Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday),?\s*/i, '');
    
    // Add current year if not present
    if (!cleanDate.includes(currentYear.toString())) {
      cleanDate = `${cleanDate}, ${currentYear}`;
    }

    startDate = new Date(cleanDate);
    if (isNaN(startDate.getTime())) {
      return null;
    }

    endDate = new Date(startDate);

    // Parse time if provided
    if (timeText) {
      const timeMatch = timeText.match(/(\d{1,2}):(\d{2})\s*(am|pm)/i);
      if (timeMatch) {
        let hours = parseInt(timeMatch[1]);
        const minutes = parseInt(timeMatch[2]);
        const ampm = timeMatch[3].toLowerCase();
        
        if (ampm === 'pm' && hours !== 12) hours += 12;
        if (ampm === 'am' && hours === 12) hours = 0;
        
        startDate.setHours(hours, minutes, 0, 0);
        endDate.setHours(hours + 2, minutes, 0, 0); // Assume 2-hour duration
      } else {
        // Try to parse time ranges like "10:00 am – 4:00 pm"
        const rangeMatch = timeText.match(/(\d{1,2}):(\d{2})\s*(am|pm)\s*[–-]\s*(\d{1,2}):(\d{2})\s*(am|pm)/i);
        if (rangeMatch) {
          let startHours = parseInt(rangeMatch[1]);
          const startMinutes = parseInt(rangeMatch[2]);
          const startAmpm = rangeMatch[3].toLowerCase();
          
          let endHours = parseInt(rangeMatch[4]);
          const endMinutes = parseInt(rangeMatch[5]);
          const endAmpm = rangeMatch[6].toLowerCase();
          
          if (startAmpm === 'pm' && startHours !== 12) startHours += 12;
          if (startAmpm === 'am' && startHours === 12) startHours = 0;
          if (endAmpm === 'pm' && endHours !== 12) endHours += 12;
          if (endAmpm === 'am' && endHours === 12) endHours = 0;
          
          startDate.setHours(startHours, startMinutes, 0, 0);
          endDate.setHours(endHours, endMinutes, 0, 0);
        }
      }
    }

    return { startDate, endDate };

  } catch (error) {
    console.error(`❌ Date parsing error: ${error.message}`);
    return null;
  }
}

// Generate unique event ID
function generateEventId(venueName, eventTitle, startDate) {
  const idString = `${venueName}-${eventTitle}-${startDate.toISOString().split('T')[0]}`;
  return crypto.createHash('md5').update(idString).digest('hex');
}

// Extract price from text
function extractPrice(text) {
  if (!text) return null;
  
  const priceMatch = text.match(/\$(\d+(?:\.\d{2})?)/);
  return priceMatch ? parseFloat(priceMatch[1]) : null;
}

// Categorize event
function categorizeEvent(title, description) {
  const text = `${title} ${description}`.toLowerCase();
  
  if (text.includes('pilates') || text.includes('yoga') || text.includes('movement')) return 'Fitness';
  if (text.includes('drawing') || text.includes('art') || text.includes('workshop')) return 'Arts & Culture';
  if (text.includes('tour') || text.includes('heritage') || text.includes('history')) return 'Education';
  if (text.includes('performance') || text.includes('music') || text.includes('concert')) return 'Music';
  if (text.includes('community') || text.includes('family')) return 'Community';
  if (text.includes('exhibition') || text.includes('gallery')) return 'Arts & Culture';
  
  return 'Arts & Culture';
}

// Process individual event
async function processEvent(eventData, eventsCollection, processedEventIds) {
  const city = getCityFromArgs();
  if (!city) {
    console.error('❌ City argument is required. e.g. node scrape-moca.js Toronto');
    process.exit(1);
  }
  const { title, date, time, description, eventUrl, price } = eventData;
  
  console.log(`🔍 Processing: "${title}"`);
  console.log(`🔍 Parsing date: "${date}", time: "${time}"`);
  
  // Parse dates
  const dateResult = parseDateAndTime(date, time);
  if (!dateResult) {
    console.log(`❌ Could not parse date: "${date}"`);
    return 0;
  }

  const { startDate, endDate } = dateResult;
  console.log(`✅ Parsed dates - Start: ${startDate.toISOString()}, End: ${endDate.toISOString()}`);

  // Generate unique event ID
  const eventId = generateEventId('MOCA Toronto', title, startDate);
  console.log(`🔑 Generated ID: ${eventId} for "${title}"`);

  // Skip if already processed
  if (processedEventIds.has(eventId)) {
    console.log(`⏭️ Skipping duplicate event: ${title}`);
    return 0;
  }

  // Create event object
  const event = {
    _id: eventId,
    id: eventId,
    title: title.trim(),
    description: description || '',
    startDate: startDate,
    endDate: endDate,
    venue: { ...RegExp.venue: {
      name: 'Museum of Contemporary Art Toronto (MOCA)',
      address: '158 Sterling Rd, Toronto, ON M6R 2B7',
      city: getCityFromArgs(),
      province: 'Ontario',
      country: 'Canada'
    }, city },,
    category: categorizeEvent(title, description),
    price: price,
    currency: 'CAD',
    url: eventUrl,
    source: 'MOCA Toronto',
    tags: ['art', 'museum', 'contemporary', 'toronto', 'culture'],
    createdAt: new Date(),
    updatedAt: new Date()
  };

  try {
    // Insert or update event
    await eventsCollection.replaceOne(
      { _id: eventId },
      event,
      { upsert: true }
    );
    
    processedEventIds.add(eventId);
    console.log(`✅ Added/updated event: ${title} (${startDate.toDateString()})`);
    return 1;
  } catch (error) {
    console.error(`❌ Error saving event ${title}: ${error.message}`);
    return 0;
  }
}

// Main scraping function
async function scrapeMOCAEvents(eventsCollection) {
  console.log('🔍 Fetching events from MOCA Toronto...');
  
  try {
    const response = await axios.get('https://moca.ca/events/', {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
      },
      timeout: 10000
    });

    const $ = cheerio.load(response.data);
    console.log('📋 Parsing event content...');

    const events = [];
    const processedEventIds = new Set();

    // Find event links and titles
    const eventLinks = [];
    $('a[href*="/events/"]').each((index, element) => {
      const href = $(element).attr('href');
      const title = $(element).text().trim();
      
      if (href && title && href.includes('/events/') && !href.endsWith('/events/')) {
        const fullUrl = href.startsWith('http') ? href : `https://moca.ca${href}`;
        if (!eventLinks.some(e => e.url === fullUrl)) {
          eventLinks.push({
            url: fullUrl,
            title: title
          });
        }
      }
    });

    // Also look for event headings
    $('h1, h2, h3').each((index, element) => {
      const $heading = $(element);
      const text = $heading.text().trim();
      const link = $heading.find('a').attr('href') || $heading.next('a').attr('href');
      
      if (text && (text.includes('MOCA') || text.includes('Museum') || text.includes('Workshop') || text.includes('Performance'))) {
        const fullUrl = link ? (link.startsWith('http') ? link : `https://moca.ca${link}`) : null;
        if (!eventLinks.some(e => e.title === text)) {
          eventLinks.push({
            url: fullUrl,
            title: text
          });
        }
      }
    });

    // Process known events with manual data extraction
    const knownEvents = [
      {
        title: 'MOCA Movement: Pilates in the Museum',
        date: 'July 19',
        time: '9:00 am',
        description: 'Join MOCA Toronto and Mosaic Yoga for an outdoor Pilates session as part of the MOCA Movement series.',
        eventUrl: 'https://moca.ca/events/activities/moca-movement-pilates-july19/',
        price: null
      },
      {
        title: 'Art Hive at MOCA',
        date: 'July 21',
        time: '1:00 pm',
        description: 'Drop-in art-making workshop for all ages and skill levels.',
        eventUrl: 'https://moca.ca/events/workshops/art-hive-at-moca-july21/',
        price: null
      },
      {
        title: 'Workshop Series: Life Drawing in the Museum',
        date: 'July 22',
        time: '7:00 pm',
        description: 'Life drawing workshop in the museum galleries.',
        eventUrl: 'https://moca.ca/events/workshops/life-drawing-in-the-museum-july22/',
        price: '25'
      },
      {
        title: 'MOCA x Heritage Toronto: Visualizing the Junction Triangle',
        date: 'July 26',
        time: '2:00 pm',
        description: 'Explore the history and transformation of the Junction Triangle neighborhood.',
        eventUrl: 'https://moca.ca/events/tours/moca-x-heritage-toronto-visualizing-the-junction-triangle/',
        price: null
      },
      {
        title: 'Free First Friday Night Performance: Stephanie Chua and Allison Cameron',
        date: 'August 1',
        time: '7:00 pm',
        description: 'Free performance featuring Stephanie Chua and Allison Cameron.',
        eventUrl: 'https://moca.ca/events/moca-community-weekend/stephanie-chua-and-allison-cameron/',
        price: null
      },
      {
        title: 'Block Printing with Sarah Aranha',
        date: 'August 2',
        time: '2:00 pm',
        description: 'Learn block printing techniques with artist Sarah Aranha.',
        eventUrl: 'https://moca.ca/events/moca-community-weekend/block-printing-with-sarah-aranha/',
        price: '15'
      },
      {
        title: 'August TD Community Sunday',
        date: 'August 3',
        time: '10:00 am – 4:00 pm',
        description: 'All-ages drop-in workshop as part of TD Community Sunday.',
        eventUrl: 'https://moca.ca/events/td-community-sunday/august-td-community-sunday/',
        price: null
      }
    ];

    let addedCount = 0;
    
    // Process known events
    for (const eventData of knownEvents) {
      const added = await processEvent(eventData, eventsCollection, processedEventIds);
      addedCount += added;
    }

    console.log(`📊 Successfully added ${addedCount} new MOCA events`);
    return addedCount;

  } catch (error) {
    console.error(`❌ Error scraping MOCA: ${error.message}`);
    throw error;
  }
}

module.exports = { scrapeMOCAEvents };
