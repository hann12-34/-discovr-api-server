const { getCityFromArgs } = require('../../utils/city-util.js');

  async scrape() {
    if (!this.enabled) {
      console.log(`${this.name} scraper is disabled`);
      return [];
    }

    console.log(`🔍 Scraping events from ${this.name}...`);
    const events = [];
    let browser;

    try {
      browser = await puppeteer.launch({
        headless: 'new',
        args: [
          '--no-sandbox',
          '--disable-setuid-sandbox',
          '--disable-dev-shm-usage',
          '--disable-accelerated-2d-canvas',
          '--no-first-run',
          '--no-zygote',
          '--disable-gpu'
        ]
      });

      const page = await browser.newPage();

      // Set viewport and user agent
      await page.setViewport({ width: 1280, height: 800 });
      await page.setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36');

      // Reduce timeout to avoid hanging
      page.setDefaultNavigationTimeout(20000);

      // Navigate to the events page
      console.log(`Navigating to ${this.url}`);
      await page.goto(this.url, {
        waitUntil: 'domcontentloaded',
        timeout: 20000
      });

      // Wait for events to load
      try {
        await page.waitForSelector(', s-list, .views-row', { timeout: 5000 });
      } catch (error) {
        console.log('Could not find event elements using standard selectors, trying to proceed anyway');
      }

      // Extract events data
      console.log('Extracting events data...');
      const eventsData = await page.evaluate(() => {
        const events = [];

        // Look for event elements with various possible selectors
        const eventElements = Array.from(document.querySelectorAll(', .views-row, -item, article, -listing'));

        eventElements.forEach(element => {
          // Extract title
          const titleElement = element.querySelector('h2, h3, h4, .title, -title');
          const title = titleElement ? titleElement.textContent.trim() : '';

          if (!title) return; // Skip events without titles

          // Extract description
          const descriptionElement = element.querySelector('p, .description, .field-content, -description');
          const description = descriptionElement ? descriptionElement.textContent.trim() : '';

          // Extract date
          const dateElement = element.querySelector('.date, -date, .datetime, time, .field-event-date');
          const dateText = dateElement ? dateElement.textContent.trim() : '';

          // Extract image URL
          let imageUrl = '';
          const imageElement = element.querySelector('img');
          if (imageElement && imageElement.src) {
            imageUrl = imageElement.src;
          }

          // Extract source URL
          let sourceUrl = '';
          const linkElement = element.querySelector('a[href]');
          if (linkElement && linkElement.href) {
            sourceUrl = linkElement.href;
          }

          // Only add events with both title and date
          if (title && (dateText || description)) {
            events.push({
              title,
              description,
              dateText,
              imageUrl,
              sourceUrl
            });
          }
        });

        return events;
      });

      console.log(`Found ${eventsData.length} potential events`);

      // Process each event
      for (const eventData of eventsData) {
        const { title, description, dateText, imageUrl, sourceUrl } = eventData;

        // Parse date information
        const dateInfo = this.parseDateRange(dateText);

        // Skip events with no valid dates
        if (!dateInfo.startDate || !dateInfo.endDate) {
          console.log(`Skipping event "${title}" due to invalid date: "${dateText}"`);
          continue;
        }

        // Generate event ID
        const eventId = this.generateEventId(title, dateInfo.startDate);

        // Create event object
        const event = this.createEventObject(
          eventId,
          title,
          description,
          dateInfo.startDate,
          dateInfo.endDate,
          imageUrl,
          sourceUrl
        );

        // Add event to events array
        events.push(event);
      }

      // If no events found, try to check the calendar page if it exists
      if (events.length === 0) {
        const calendarUrl = 'https://granvilleisland.com/calendar';
        console.log(`No events found, checking calendar page: ${calendarUrl}`);

        try {
          await page.goto(calendarUrl, {
            waitUntil: 'domcontentloaded',
            timeout: 20000
          });

          // Wait for calendar events to load
          try {
            await page.waitForSelector('.calendar-event, .views-row, ', { timeout: 5000 });
          } catch (error) {
            console.log('Could not find calendar event elements, trying to proceed anyway');
          }

          // Extract calendar events
          const calendarEvents = await page.evaluate(() => {
            const events = [];

            const eventElements = Array.from(document.querySelectorAll('.calendar-event, .views-row, , -item'));

            eventElements.forEach(element => {
              const title = element.querySelector('h2, h3, h4, .title, -title')?.textContent.trim() || '';
              if (!title) return;

              const description = element.querySelector('p, .description, .field-content')?.textContent.trim() || '';
              const dateText = element.querySelector('.date, -date, time, .field-event-date')?.textContent.trim() || '';
              const imageUrl = element.querySelector('img')?.src || '';
              const sourceUrl = element.querySelector('a[href]')?.href || '';

              if (title && (dateText || description)) {
                events.push({
                  title,
                  description,
                  dateText,
                  imageUrl,
                  sourceUrl
                });
              }
            });

            return events;
          });

          // Process calendar events
          for (const eventData of calendarEvents) {
            const dateInfo = this.parseDateRange(eventData.dateText);

            if (!dateInfo.startDate || !dateInfo.endDate) {
              console.log(`Skipping calendar event "${eventData.title}" due to invalid date: "${eventData.dateText}"`);
              continue;
            }

            const eventId = this.generateEventId(eventData.title, dateInfo.startDate);

            const event = this.createEventObject(
              eventId,
              eventData.title,
              eventData.description,
              dateInfo.startDate,
              dateInfo.endDate,
              eventData.imageUrl,
              eventData.sourceUrl || calendarUrl
            );

            events.push(event);
          }
        } catch (error) {
          console.log(`Error checking calendar page: ${error.message}`);
        }
      }

      console.log(`Found ${events.length} events from ${this.name}`);

    } catch (error) {
      console.error(`Error scraping ${this.name}: ${error.message}`);
    } finally {
      if (browser) {
        await browser.close();
      }
    }

    return events;
  }
};

module.exports = GranvilleIslandEvents;
