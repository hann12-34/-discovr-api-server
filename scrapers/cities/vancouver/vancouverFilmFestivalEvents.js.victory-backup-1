const { getCityFromArgs } = require('../../utils/city-util.js');

  async scrape() {
    if (!this.enabled) {
      console.log(`${this.name} scraper is disabled`);
      return [];
    }

    console.log(`🔍 Scraping events from ${this.name}...`);
    const events = [];
    let browser;

    try {
      browser = await puppeteer.launch({
        headless: 'new',
        args: [
          '--no-sandbox',
          '--disable-setuid-sandbox',
          '--disable-dev-shm-usage',
          '--disable-accelerated-2d-canvas',
          '--no-first-run',
          '--no-zygote',
          '--disable-gpu'
        ]
      });

      const page = await browser.newPage();

      // Set viewport and user agent
      await page.setViewport({ width: 1280, height: 800 });
      await page.setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36');

      // Reduce timeout to avoid hanging
      page.setDefaultNavigationTimeout(20000);

      // Navigate to the events page
      console.log(`Navigating to ${this.url}`);
      await page.goto(this.url, {
        waitUntil: 'networkidle2',
        timeout: 20000
      });

      // Wait for events to load
      try {
        await page.waitForSelector('.film-card, -card, .film-item, article', { timeout: 10000 });
      } catch (error) {
        console.log('Could not find event elements using standard selectors, trying to proceed anyway');
      }

      // Extract events data
      console.log('Extracting film and event data...');
      const filmsData = await page.evaluate(() => {
        const films = [];

        // Look for film elements with various possible selectors
        const filmElements = Array.from(document.querySelectorAll('.film-card, -card, .film-item, article, '));

        filmElements.forEach(element => {
          // Extract title
          const titleElement = element.querySelector('h2, h3, h4, .title, .film-title, -title');
          const title = titleElement ? titleElement.textContent.trim() : '';

          if (!title) return; // Skip films without titles

          // Extract description
          const descriptionElement = element.querySelector('p, .description, .synopsis, .excerpt');
          const description = descriptionElement ? descriptionElement.textContent.trim() : '';

          // Extract date
          const dateElement = element.querySelector('.date, -date, .screening-date, time');
          const dateText = dateElement ? dateElement.textContent.trim() : '';

          // Extract image URL
          let imageUrl = '';
          const imageElement = element.querySelector('img');
          if (imageElement && imageElement.src) {
            imageUrl = imageElement.src;
          }

          // Extract source URL
          let sourceUrl = '';
          const linkElement = element.querySelector('a[href]');
          if (linkElement && linkElement.href) {
            sourceUrl = linkElement.href;
          }

          // Only add films with a title
          if (title) {
            films.push({
              title,
              description,
              dateText,
              imageUrl,
              sourceUrl
            });
          }
        });

        return films;
      });

      console.log(`Found ${filmsData.length} potential films/events`);

      // Process each film/event
      for (const filmData of filmsData) {
        const { title, description, dateText, imageUrl, sourceUrl } = filmData;

        // If we have a source URL, visit the detail page to get more information
        if (sourceUrl) {
          console.log(`Visiting film detail page: ${sourceUrl}`);

          try {
            await page.goto(sourceUrl, {
              waitUntil: 'networkidle2',
              timeout: 15000
            });

            // Extract detailed film information
            const detailData = await page.evaluate(() => {
              // Extract date(s) from the page
              const dateElements = Array.from(document.querySelectorAll('.screening-date, .date, -date, .showtime'));
              const dateTexts = dateElements.map(el => el.textContent.trim()).filter(text => text);

              // Extract description/synopsis
              const descriptionElement = document.querySelector('.synopsis, .description, -description, .content');
              const description = descriptionElement ? descriptionElement.textContent.trim() : '';

              // Extract better image if available
              const imageElement = document.querySelector('.film-poster img, -image img, .featured-image img');
              const imageUrl = imageElement && imageElement.src ? imageElement.src : '';

              // Extract details like director, country, year
              const detailElements = Array.from(document.querySelectorAll('.film-details, .meta, .details'));
              let details = '';
              detailElements.forEach(el => {
                details += el.textContent.trim() + ' ';
              });

              return {
                dateTexts,
                description,
                imageUrl,
                details
              };
            });

            // Try to find valid dates from the detail page
            let foundValidDate = false;
            if (detailData.dateTexts && detailData.dateTexts.length > 0) {
              // Try each date text found on the page
              for (const dateText of detailData.dateTexts) {
                const dateInfo = this.parseDateRange(dateText);

                if (dateInfo.startDate && dateInfo.endDate) {
                  console.log(`Found valid date: ${dateText}`);

                  // Generate event ID
                  const eventId = this.generateEventId(title, dateInfo.startDate);

                  // Create event object
                  const event = this.createEventObject(
                    eventId,
                    title,
                    (detailData.description || description) + (detailData.details ? `\n\nDetails: ${detailData.details}` : ''),
                    dateInfo.startDate,
                    dateInfo.endDate,
                    detailData.imageUrl || imageUrl,
                    sourceUrl
                  );

                  // Add event to events array
                  events.push(event);
                  foundValidDate = true;
                  break; // Found a valid date, no need to check others
                }
              }
            }

            // If no valid dates found from date elements, check if the film is part of the festival itself
            if (!foundValidDate) {
              console.log(`No specific screening dates found for "${title}". Checking for festival dates.`);

              // Look for festival dates on the page or in the content
              const festivalDateMatch = await page.evaluate(() => {
                const content = document.body.textContent;

                // Look for common festival date patterns
                const patterns = [
                  /festival runs? (?:from )?([\w\s,]+)(?:\s*[-–—]\s*([\w\s,]+))?/i,
                  /(\w+ \d{1,2}(?:st|nd|rd|th)? ?[-–—] ?\w+ \d{1,2}(?:st|nd|rd|th)?,? \d{4})/i,
                  /(\w+ \d{1,2}(?:st|nd|rd|th)? ?[-–—] ?\d{1,2}(?:st|nd|rd|th)?,? \d{4})/i,
                  /(viff \d{4}:? \w+ \d{1,2}(?:st|nd|rd|th)? ?[-–—] ?\w+ \d{1,2}(?:st|nd|rd|th)?)/i,
                  /dates: ([\w\s,]+)(?:\s*[-–—]\s*([\w\s,]+))?/i
                ];

                for (const pattern of patterns) {
                  const match = content.match(pattern);
                  if (match) {
                    return match[0];
                  }
                }

                return null;
              });

              if (festivalDateMatch) {
                console.log(`Found festival date reference: ${festivalDateMatch}`);

                // Try to parse the festival date
                const dateInfo = this.parseDateRange(festivalDateMatch);

                if (dateInfo.startDate && dateInfo.endDate) {
                  // Generate event ID
                  const eventId = this.generateEventId(title, dateInfo.startDate);

                  // Create event object
                  const event = this.createEventObject(
                    eventId,
                    title,
                    (detailData.description || description) + (detailData.details ? `\n\nDetails: ${detailData.details}` : ''),
                    dateInfo.startDate,
                    dateInfo.endDate,
                    detailData.imageUrl || imageUrl,
                    sourceUrl
                  );

                  // Add event to events array
                  events.push(event);
                  foundValidDate = true;
                }
              }
            }

            // If still no valid dates, try to find this year's festival dates from the homepage
            if (!foundValidDate) {
              console.log('No specific dates found. Looking for festival dates on the homepage.');

              try {
                await page.goto('https://viff.org/', { waitUntil: 'networkidle2', timeout: 15000 });

                const festivalDates = await page.evaluate(() => {
                  // Look for the main festival dates on the homepage
                  const content = document.body.textContent;

                  // Common patterns for festival dates on homepage
                  const patterns = [
                    /(\d{4}) festival:? (\w+ \d{1,2}(?:st|nd|rd|th)?)(?:\s*[-–—]\s*(\w+ \d{1,2}(?:st|nd|rd|th)?))?/i,
                    /viff \d{4}:? (\w+ \d{1,2}(?:st|nd|rd|th)?)(?:\s*[-–—]\s*(\w+ \d{1,2}(?:st|nd|rd|th)?))?/i,
                    /\d{4} festival dates:? (\w+ \d{1,2}(?:st|nd|rd|th)?)(?:\s*[-–—]\s*(\w+ \d{1,2}(?:st|nd|rd|th)?))?/i
                  ];

                  for (const pattern of patterns) {
                    const match = content.match(pattern);
                    if (match) {
                      return match[0];
                    }
                  }

                  // Check for any dates mentioned with the current year
                  const currentYear = new Date().getFullYear();
                  const yearPattern = new RegExp(`${currentYear}[^\\d]+(\\w+ \\d{1,2}(?:st|nd|rd|th)?)(?:\\s*[-–—]\\s*(\\w+ \\d{1,2}(?:st|nd|rd|th)?))?`, 'i');
                  const yearMatch = content.match(yearPattern);

                  if (yearMatch) {
                    return yearMatch[0];
                  }

                  return null;
                });

                if (festivalDates) {
                  console.log(`Found festival dates on homepage: ${festivalDates}`);

                  // Try to parse the festival dates
                  const dateInfo = this.parseDateRange(festivalDates);

                  if (dateInfo.startDate && dateInfo.endDate) {
                    // Generate event ID
                    const eventId = this.generateEventId(title, dateInfo.startDate);

                    // Create event object
                    const event = this.createEventObject(
                      eventId,
                      title,
                      (detailData.description || description) + (detailData.details ? `\n\nDetails: ${detailData.details}` : ''),
                      dateInfo.startDate,
                      dateInfo.endDate,
                      detailData.imageUrl || imageUrl,
                      sourceUrl
                    );

                    // Add event to events array
                    events.push(event);
                    foundValidDate = true;
                  }
                }
              } catch (error) {
                console.log(`Error checking homepage for festival dates: ${error.message}`);
              }
            }

            // If we still don't have dates, skip this event
            if (!foundValidDate) {
              console.log(`Skipping film "${title}" due to missing valid dates`);
            }

          } catch (error) {
            console.log(`Error accessing film detail page: ${error.message}`);
          }
        }
        // If no source URL but we have date text, try to parse it
        else if (dateText) {
          const dateInfo = this.parseDateRange(dateText);

          if (dateInfo.startDate && dateInfo.endDate) {
            // Generate event ID
            const eventId = this.generateEventId(title, dateInfo.startDate);

            // Create event object
            const event = this.createEventObject(
              eventId,
              title,
              description,
              dateInfo.startDate,
              dateInfo.endDate,
              imageUrl,
              this.url
            );

            // Add event to events array
            events.push(event);
          } else {
            console.log(`Skipping film "${title}" due to invalid date: "${dateText}"`);
          }
        } else {
          console.log(`Skipping film "${title}" due to missing date and source URL`);
        }
      }

      console.log(`Found ${events.length} events from ${this.name}`);

    } catch (error) {
      console.error(`Error scraping ${this.name}: ${error.message}`);
    } finally {
      if (browser) {
        await browser.close();
      }
    }

    return events;
  }
};

module.exports = VancouverFilmFestivalEvents;
