const { getCityFromArgs } = require('../../utils/city-util.js');

  async scrape() {
    if (!this.enabled) {
      console.log(`${this.name} scraper is disabled`);
      return [];
    }
    
    console.log(`🔍 Scraping events from ${this.name}...`);
    const events = [];
    let browser;
    
    try {
      browser = await puppeteer.launch({
        headless: 'new',
        args: ['--no-sandbox', '--disable-setuid-sandbox']
      });
      
      const page = await browser.newPage();
      await page.setViewport({ width: 1280, height: 800 });
      await page.setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36');
      
      // Use shorter timeout
      page.setDefaultNavigationTimeout(15000);
      
      console.log(`Navigating to ${this.url}`);
      await page.goto(this.url, { waitUntil: 'networkidle2', timeout: 15000 });
      
      // Wait for exhibition or event listings
      try {
        await page.waitForSelector('.exhibition-item, .event-item, article, .exhibitions, .events', { timeout: 8000 });
      } catch (error) {
        console.log('Could not find standard event selectors, trying to proceed anyway');
      }
      
      // First, scrape exhibitions
      console.log('Scraping exhibitions...');
      const exhibitions = await page.evaluate(() => {
        const items = [];
        
        // Try different selectors for exhibitions
        const exhibitionElements = Array.from(document.querySelectorAll(
          '.exhibition-item, .exhibition, article, .exhibition-card, [data-category="exhibition"]'
        ));
        
        exhibitionElements.forEach(element => {
          const title = element.querySelector('h2, h3, h4, .title')?.textContent.trim() || '';
          if (!title) return;
          
          const description = element.querySelector('p, .description, .excerpt, .summary')?.textContent.trim() || '';
          const dateText = element.querySelector('.date, time, .exhibition-date, .dates')?.textContent.trim() || '';
          const imageUrl = element.querySelector('img')?.src || '';
          const sourceUrl = element.querySelector('a[href]')?.href || '';
          
          items.push({
            title,
            description,
            dateText,
            imageUrl,
            sourceUrl,
            type: 'Exhibition'
          });
        });
        
        return items;
      });
      
      console.log(`Found ${exhibitions.length} potential exhibitions`);
      
      // Next, scrape events
      console.log('Navigating to events page...');
      
      // Check if there's a dedicated events page
      let eventsUrl = await page.evaluate(() => {
        const eventsLink = document.querySelector('a[href*="events"], a[href*="calendar"], a[href*="programs"]');
        return eventsLink ? eventsLink.href : null;
      });
      
      let events_data = [];
      
      if (eventsUrl) {
        console.log(`Found events page: ${eventsUrl}`);
        await page.goto(eventsUrl, { waitUntil: 'networkidle2', timeout: 15000 });
        
        try {
          await page.waitForSelector('.event-item, .event, article, .events-listing', { timeout: 8000 });
        } catch (error) {
          console.log('Could not find standard event selectors on events page, trying to proceed anyway');
        }
        
        events_data = await page.evaluate(() => {
          const items = [];
          
          // Try different selectors for events
          const eventElements = Array.from(document.querySelectorAll(
            '.event-item, .event, article, .program-item, [data-category="event"]'
          ));
          
          eventElements.forEach(element => {
            const title = element.querySelector('h2, h3, h4, .title')?.textContent.trim() || '';
            if (!title) return;
            
            const description = element.querySelector('p, .description, .excerpt, .summary')?.textContent.trim() || '';
            const dateText = element.querySelector('.date, time, .event-date, .dates')?.textContent.trim() || '';
            const imageUrl = element.querySelector('img')?.src || '';
            const sourceUrl = element.querySelector('a[href]')?.href || '';
            
            // Try to determine event type
            let type = 'Event';
            const typeElement = element.querySelector('.type, .category, .event-type');
            if (typeElement) {
              type = typeElement.textContent.trim();
            } else if (title.toLowerCase().includes('workshop')) {
              type = 'Workshop';
            } else if (title.toLowerCase().includes('talk') || title.toLowerCase().includes('lecture')) {
              type = 'Talk';
            } else if (title.toLowerCase().includes('tour')) {
              type = 'Tour';
            } else if (title.toLowerCase().includes('family') || title.toLowerCase().includes('kids')) {
              type = 'Family Program';
            }
            
            items.push({
              title,
              description,
              dateText,
              imageUrl,
              sourceUrl,
              type
            });
          });
          
          return items;
        });
      }
      
      console.log(`Found ${events_data.length} potential events`);
      
      // Combine exhibitions and events
      const allItems = [...exhibitions, ...events_data];
      
      // Process each item
      for (const item of allItems) {
        // Parse date information
        const dateInfo = this.parseDateRange(item.dateText);
        
        // Skip items with no valid dates
        if (!dateInfo.startDate || !dateInfo.endDate) {
          console.log(`Skipping "${item.title}" due to invalid date: "${item.dateText}"`);
          continue;
        }
        
        // Generate event ID
        const eventId = this.generateEventId(item.title, dateInfo.startDate);
        
        // Create event object
        const event = this.createEventObject(
          eventId,
          item.title,
          item.description,
          dateInfo.startDate,
          dateInfo.endDate,
          item.imageUrl,
          item.sourceUrl,
          item.type
        );
        
        // Add event to events array
        events.push(event);
      }
      
      console.log(`Found ${events.length} events from ${this.name}`);
      
    } catch (error) {
      console.error(`Error scraping ${this.name}: ${error.message}`);
    } finally {
      if (browser) {
        await browser.close();
      }
    }
    
    return events;
  }
};

module.exports = ArtGalleryEvents;
