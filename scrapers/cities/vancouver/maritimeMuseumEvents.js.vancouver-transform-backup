const { getCityFromArgs } = require('../../utils/city-util.js');

  async scrape() {
    if (!this.enabled) {
      console.log(`${this.name} scraper is disabled`);
      return [];
    }
    
    console.log(`🔍 Scraping events from ${this.name}...`);
    const events = [];
    let browser;
    
    try {
      browser = await puppeteer.launch({
        headless: 'new',
        args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage']
      });
      
      const page = await browser.newPage();
      await page.setViewport({ width: 1280, height: 800 });
      await page.setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36');
      
      // Set shorter timeout to avoid hanging
      page.setDefaultNavigationTimeout(15000);
      
      console.log(`Navigating to ${this.url}`);
      await page.goto(this.url, { waitUntil: 'networkidle2', timeout: 15000 });
      
      try {
        await page.waitForSelector('.event-item, .event-card, .event, article, .event-list-item', { timeout: 8000 });
      } catch (error) {
        console.log('Could not find event elements with standard selectors, trying alternative selectors');
        try {
          // Try alternative selectors
          await page.waitForSelector('.program-item, .exhibition, .card, .program-card', { timeout: 5000 });
        } catch (error) {
          console.log('Could not find event elements with alternative selectors either, continuing anyway');
        }
      }
      
      const eventsData = await page.evaluate(() => {
        const events = [];
        
        // Try various selectors that might contain event information
        const selectors = [
          '.event-item, .event-card, .event, article, .event-list-item',
          '.program-item, .exhibition, .card, .program-card',
          '.whats-on-item, .calendar-item'
        ];
        
        let eventElements = [];
        for (const selector of selectors) {
          const elements = Array.from(document.querySelectorAll(selector));
          if (elements.length > 0) {
            eventElements = elements;
            break;
          }
        }
        
        // If no specific event elements found, try to look for heading-based content
        if (eventElements.length === 0) {
          const headings = Array.from(document.querySelectorAll('h2, h3, h4'));
          for (const heading of headings) {
            // Skip navigation or menu headings
            if (heading.closest('nav, .menu, .navigation, header, footer')) continue;
            
            const title = heading.textContent.trim();
            if (!title) continue;
            
            // Find description near the heading
            let description = '';
            let descElement = heading.nextElementSibling;
            while (descElement && (descElement.tagName === 'P' || descElement.tagName === 'DIV')) {
              description += ' ' + descElement.textContent.trim();
              descElement = descElement.nextElementSibling;
            }
            
            // Look for date text near the heading
            let dateText = '';
            let dateElement = heading.parentElement.querySelector('time, .date, .datetime');
            if (!dateElement) {
              // Look in siblings or parent for date text
              const parentElement = heading.parentElement;
              const siblings = Array.from(parentElement.children);
              
              for (const sibling of siblings) {
                const text = sibling.textContent.trim();
                if (/\b(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)\b/i.test(text) || 
                    /\d{1,2}\/\d{1,2}\/\d{4}/.test(text) ||
                    /\d{4}-\d{2}-\d{2}/.test(text)) {
                  dateText = text;
                  break;
                }
              }
            } else {
              dateText = dateElement.textContent.trim();
            }
            
            // Try to find an image near the heading
            let imageUrl = '';
            let imgElement = heading.parentElement.querySelector('img');
            if (imgElement) {
              imageUrl = imgElement.src;
            }
            
            // Try to find a link near the heading
            let sourceUrl = '';
            let linkElement = heading.closest('a');
            if (!linkElement) {
              linkElement = heading.parentElement.querySelector('a[href]');
            }
            if (linkElement) {
              sourceUrl = linkElement.href;
            }
            
            if (title) {
              events.push({
                title,
                description: description.trim(),
                dateText,
                imageUrl,
                sourceUrl
              });
            }
          }
        } else {
          // Process standard event elements
          eventElements.forEach(element => {
            const title = element.querySelector('h2, h3, h4, .title, .event-title')?.textContent.trim() || '';
            if (!title) return;
            
            const description = element.querySelector('p, .description, .excerpt, .summary')?.textContent.trim() || '';
            const dateText = element.querySelector('time, .date, .event-date, .datetime')?.textContent.trim() || '';
            const imageUrl = element.querySelector('img')?.src || '';
            const sourceUrl = element.querySelector('a[href]')?.href || '';
            
            events.push({
              title,
              description,
              dateText,
              imageUrl,
              sourceUrl
            });
          });
        }
        
        return events;
      });
      
      console.log(`Found ${eventsData.length} potential events`);
      
      // Process each event data to create event objects
      for (const eventData of eventsData) {
        // Parse date information
        const dateInfo = this.parseDateRange(eventData.dateText);
        
        // Skip events with no valid dates
        if (!dateInfo.startDate || !dateInfo.endDate) {
          console.log(`Skipping event "${eventData.title}" due to invalid date: "${eventData.dateText}"`);
          continue;
        }
        
        // Generate event ID
        const eventId = this.generateEventId(eventData.title, dateInfo.startDate);
        
        // Create event object
        const event = this.createEventObject(
          eventId,
          eventData.title,
          eventData.description,
          dateInfo.startDate,
          dateInfo.endDate,
          eventData.imageUrl,
          eventData.sourceUrl
        );
        
        // Add event to events array
        events.push(event);
      }
      
      console.log(`Found ${events.length} events from ${this.name}`);
      
    } catch (error) {
      console.error(`Error scraping ${this.name}: ${error.message}`);
    } finally {
      if (browser) {
        await browser.close();
      }
    }
    
    return events;
  }
};

module.exports = MaritimeMuseumEvents;
