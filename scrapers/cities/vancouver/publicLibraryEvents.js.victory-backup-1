const { getCityFromArgs } = require('../../utils/city-util.js');

  cleanHtmlContent(htmlContent) {
    if (!htmlContent) return '';

    // Remove HTML tags
    let text = htmlContent.replace(/<[^>]*>/g, ' ');

    // Replace multiple spaces, newlines with single space
    text = text.replace(/\s+/g, ' ');

    // Decode HTML entities
    text = text.replace(/&amp;/g, '&')
               .replace(/&lt;/g, '<')
               .replace(/&gt;/g, '>')
               .replace(/&quot;/g, '"')
               .replace(/&#039;/g, "'");

    return text.trim();
  },

  /**
   * Main scraping function
   * @returns {Promise<Array>} - Array of event objects
   */
  async scrape() {
    if (!this.enabled) {
      console.log(`${this.name} scraper is disabled`);
      return [];
    }

    console.log(`🔍 Scraping events from ${this.name}...`);
    const events = [];
    let browser;

    try {
      browser = await puppeteer.launch({
        headless: 'new',
        args: ['--no-sandbox', '--disable-setuid-sandbox']
      });

      const page = await browser.newPage();
      await page.setViewport({ width: 1280, height: 800 });
      await page.setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36');

      // Use shorter timeout
      page.setDefaultNavigationTimeout(15000);

      console.log(`Navigating to ${this.url}`);
      await page.goto(this.url, { waitUntil: 'networkidle2', timeout: 15000 });

      // Wait for events to load
      try {
        await page.waitForSelector('.views-row, -item, , .views-field', { timeout: 8000 });
      } catch (error) {
        console.log('Could not find event elements with standard selectors, trying to proceed anyway');
      }

      // Extract events data
      const eventsData = await page.evaluate(() => {
        const events = [];

        // Try different selectors for events (VPL likely uses Drupal with Views)
        const eventElements = Array.from(document.querySelectorAll(
          '.views-row, -item, , .views-field'
        ));

        eventElements.forEach(element => {
          // Try to extract title
          let title = '';
          const titleElement = element.querySelector('-title, h2, h3, .field-content a, .views-field-title');
          if (titleElement) {
            title = titleElement.textContent.trim();
          }

          if (!title) return;

          // Try to extract description
          let description = '';
          const descElement = element.querySelector('-description, .field-event-description, .views-field-body, .views-field-field-description');
          if (descElement) {
            description = descElement.textContent.trim();
          }

          // Try to extract date
          let dateText = '';
          const dateElement = element.querySelector('.date-display-single, .date, .datetime, .views-field-field-date, .views-field-field-event-date');
          if (dateElement) {
            dateText = dateElement.textContent.trim();
          }

          // Try to extract location/branch
          let location = '';
          const locationElement = element.querySelector('.location, .branch, .views-field-field-branch, .views-field-field-location');
          if (locationElement) {
            location = locationElement.textContent.trim();
          }

          // Try to extract image URL
          let imageUrl = '';
          const imgElement = element.querySelector('img');
          if (imgElement && imgElement.src) {
            imageUrl = imgElement.src;
          }

          // Try to extract link URL
          let sourceUrl = '';
          const linkElement = element.querySelector('a');
          if (linkElement && linkElement.href) {
            sourceUrl = linkElement.href;
          }

          events.push({
            title,
            description,
            dateText,
            location,
            imageUrl,
            sourceUrl
          });
        });

        return events;
      });

      console.log(`Found ${eventsData.length} potential events`);

      // Process each event data
      for (const eventData of eventsData) {
        // Parse date information
        const dateInfo = this.parseDateRange(eventData.dateText);

        // Skip events with no valid dates
        if (!dateInfo.startDate || !dateInfo.endDate) {
          console.log(`Skipping event "${eventData.title}" due to invalid date: "${eventData.dateText}"`);
          continue;
        }

        // Extract branch name from location
        const branchName = this.extractBranchName(eventData.location);

        // Generate event ID
        const eventId = this.generateEventId(eventData.title, dateInfo.startDate);

        // Create event object
        const event = this.createEventObject(
          eventId,
          eventData.title,
          eventData.description,
          dateInfo.startDate,
          dateInfo.endDate,
          eventData.imageUrl,
          eventData.sourceUrl,
          branchName
        );

        // Add event to events array
        events.push(event);
      }

      console.log(`Found ${events.length} events from ${this.name}`);

    } catch (error) {
      console.error(`Error scraping ${this.name}: ${error.message}`);
    } finally {
      if (browser) {
        await browser.close();
      }
    }

    return events;
  }
};

module.exports = PublicLibraryEvents;
