const { getCityFromArgs } = require('../../utils/city-util.js');

  async scrape() {
    if (!this.enabled) {
      console.log(`${this.name} scraper is disabled`);
      return [];
    }

    console.log(`🔍 Scraping events from ${this.name}...`);
    const events = [];
    let browser;

    try {
      // Launch Puppeteer browser
      browser = await puppeteer.launch({
        headless: 'new',
        args: [
          '--no-sandbox',
          '--disable-setuid-sandbox',
          '--ignore-certificate-errors',
          '--disable-features=IsolateOrigins',
          '--disable-site-isolation-trials'
        ]
      });

      const page = await browser.newPage();

      // Set viewport and user agent
      await page.setViewport({ width: 1280, height: 800 });
      await page.setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36');

      // Navigate to the events page
      console.log(`Navigating to ${this.url}`);
      await page.goto(this.url, {
        waitUntil: 'networkidle2',
        timeout: 60000
      });

      // Extract events from the main page
      const mainPageEvents = await page.evaluate(() => {
        const events = [];

        // Look for event containers
        const eventContainers = Array.from(document.querySelectorAll('-item, -card, -listing, article, .grid-item'));

        eventContainers.forEach(container => {
          const title = container.querySelector('h2, h3, h4, .title, -title')?.textContent.trim() || '';
          if (!title) return;

          const description = container.querySelector('p, .description, .excerpt, -description')?.textContent.trim() || '';
          const dateText = container.querySelector('.date, -date, time, .datetime, .date-display')?.textContent.trim() || '';
          const imageUrl = container.querySelector('img')?.src || '';
          const linkElement = container.querySelector('a[href]');
          const link = linkElement ? new URL(linkElement.href, window.location.href).href : '';

          if (title) {
            events.push({
              title,
              description,
              dateText,
              imageUrl,
              link
            });
          }
        });

        return events;
      });

      // Process each main page event
      for (const eventData of mainPageEvents) {
        const { title, description, dateText, imageUrl, link } = eventData;

        // Parse date information
        const dateInfo = this.parseDateRange(dateText);

        // Skip events with no dates
        if (!dateInfo.startDate && !dateInfo.endDate) {
          console.log(`Skipping event "${title}" due to missing or invalid date: "${dateText}"`);
          continue;
        }

        // Generate event ID and create event object
        const eventId = this.generateEventId(title, dateInfo.startDate);

        const event = this.createEventObject(
          eventId,
          title,
          description,
          dateInfo.startDate,
          dateInfo.endDate,
          imageUrl,
          link || this.url
        );

        events.push(event);
      }

      // If no events found on main page, try to find event links and follow them
      if (events.length === 0) {
        const eventLinks = await page.evaluate(() => {
          const links = [];
          const allLinks = Array.from(document.querySelectorAll('a[href]'));

          for (const link of allLinks) {
            const href = link.href;
            if (href.includes('/event/') || href.includes('/events/') || href.includes('/exhibition/')) {
              links.push(href);
            }
          }

          return [...new Set(links)]; // Return unique links
        });

        // Visit up to 5 event detail pages
        for (const link of eventLinks.slice(0, 5)) {
          console.log(`Visiting event page: ${link}`);
          await page.goto(link, { waitUntil: 'networkidle2', timeout: 30000 });

          const eventData = await page.evaluate(() => {
            const title = document.querySelector('h1, h2, .title, -title')?.textContent.trim() || '';
            const description = document.querySelector('.description, .content, article p')?.textContent.trim() || '';
            const dateText = document.querySelector('.date, -date, time, .datetime')?.textContent.trim() || '';
            const imageUrl = document.querySelector('.featured-image img, -image img')?.src || '';

            return {
              title,
              description,
              dateText,
              imageUrl,
              link: window.location.href
            };
          });

          if (!eventData.title) continue;

          // Parse date information
          const dateInfo = this.parseDateRange(eventData.dateText);

          // Skip events with no dates
          if (!dateInfo.startDate && !dateInfo.endDate) {
            console.log(`Skipping event "${eventData.title}" due to missing or invalid date: "${eventData.dateText}"`);
            continue;
          }

          // Generate event ID and create event object
          const eventId = this.generateEventId(eventData.title, dateInfo.startDate);

          const event = this.createEventObject(
            eventId,
            eventData.title,
            eventData.description,
            dateInfo.startDate,
            dateInfo.endDate,
            eventData.imageUrl,
            eventData.link
          );

          events.push(event);
        }
      }

      console.log(`Found ${events.length} events from ${this.name}`);

    } catch (error) {
      console.error(`Error scraping ${this.name}: ${error.message}`);
    } finally {
      if (browser) {
        await browser.close();
      }
    }

    return events;
  }
};

module.exports = WesternFrontEvents;
