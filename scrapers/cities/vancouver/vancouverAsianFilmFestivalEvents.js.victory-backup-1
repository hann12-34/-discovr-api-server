const { getCityFromArgs } = require('../../utils/city-util.js');

  determineCategories(title, description) {
    const text = `${title} ${description}`.toLowerCase();
    const categories = ['film', 'festival', 'arts', 'asian', 'cultural'];

    if (text.includes('workshop') || text.includes('masterclass')) {
      categories.push('workshop');
    }

    if (text.includes('panel') || text.includes('discussion') || text.includes('talk')) {
      categories.push('talk');
    }

    if (text.includes('award') || text.includes('gala')) {
      categories.push('gala');
    }

    if (text.includes('premiere')) {
      categories.push('premiere');
    }

    return categories;
  }

  /**
   * Main scraping function to extract events
   * @returns {Promise<Array>} - Array of event objects
   */
  async scrape() {
    if (!this.enabled) {
      console.log(`${this.name} scraper is disabled`);
      return [];
    }

    console.log(`🔍 Scraping events from ${this.name}...`);
    const events = [];
    let browser;

    try {
      // Launch Puppeteer browser
      browser = await puppeteer.launch({
        headless: 'new',
        args: [
          '--no-sandbox',
          '--disable-setuid-sandbox',
          '--ignore-certificate-errors',
          '--disable-features=IsolateOrigins',
          '--disable-site-isolation-trials'
        ]
      });

      const page = await browser.newPage();

      // Set viewport and user agent
      await page.setViewport({ width: 1280, height: 800 });
      await page.setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36');

      // Navigate to the events page
      console.log(`Navigating to ${this.url}`);
      await page.goto(this.url, {
        waitUntil: 'networkidle2',
        timeout: 60000
      });

      // First, try to extract festival dates from any element on the page
      const festivalDateInfo = await page.evaluate(() => {
        // Look for common date formats in any element
        const datePatterns = [
          // November 1-7, 2024 format
          /(November|Oct|October|Aug|August|Sept|September)\s+\d{1,2}\s*[-–—]\s*\d{1,2},?\s+(202\d)/i,
          // Nov 1-7, 2024 format
          /(Nov|Oct|Aug|Sep)\s+\d{1,2}\s*[-–—]\s*\d{1,2},?\s+(202\d)/i,
          // 1-7 November 2024 format
          /(\d{1,2})\s*[-–—]\s*(\d{1,2})\s+(November|October|August|September),?\s+(202\d)/i,
          // Just the year with festival mentions
          /VAFF\s+202\d|202\d\s+VAFF|Vancouver\s+Asian\s+Film\s+Festival\s+202\d|202\d\s+Vancouver\s+Asian\s+Film\s+Festival/i
        ];

        // Check all text elements for date patterns
        const textElements = Array.from(document.querySelectorAll('h1, h2, h3, h4, h5, p, div, span, a, li'));

        let festivalDate = '';
        let festivalTitle = '';
        let festivalDescription = '';
        let festivalImage = '';

        // Find date elements
        for (const el of textElements) {
          const text = el.textContent.trim();

          // Skip very short or empty texts
          if (text.length < 3) continue;

          // Check for festival title
          if (!festivalTitle && (text.includes('VAFF') ||
              text.toLowerCase().includes('vancouver asian film festival') ||
              text.toLowerCase().includes('asian film festival'))) {
            festivalTitle = text;
          }

          // Check for date patterns
          for (const pattern of datePatterns) {
            const match = text.match(pattern);
            if (match) {
              festivalDate = match[0];
              break;
            }
          }

          // Once we find both title and date, we can stop
          if (festivalTitle && festivalDate) break;
        }

        // Find a description
        const descElements = Array.from(document.querySelectorAll('p'));
        for (const el of descElements) {
          const text = el.textContent.trim();
          if (text.length > 100 &&
              (text.toLowerCase().includes('film') ||
               text.toLowerCase().includes('festival') ||
               text.toLowerCase().includes('asian'))) {
            festivalDescription = text;
            break;
          }
        }

        // Find an image
        const images = Array.from(document.querySelectorAll('img'))
          .filter(img => img.width > 200 && img.height > 150 &&
                  img.src && !img.src.includes('logo') &&
                  (img.src.includes('festival') || img.src.includes('film') ||
                   img.alt && (img.alt.includes('festival') || img.alt.includes('VAFF'))));

        if (images.length > 0) {
          festivalImage = images[0].src;
        }

        return {
          date: festivalDate,
          title: festivalTitle || 'Vancouver Asian Film Festival',
          description: festivalDescription,
          imageUrl: festivalImage
        };
      });

      // If we have festival date information, create the main festival event
      if (festivalDateInfo.date) {
        // Try to parse the date string
        const dateMatch = festivalDateInfo.date.match(/(November|Oct|October|Aug|August|Sept|September)\s+(\d{1,2})\s*[-–—]\s*(\d{1,2}),?\s+(202\d)/i) ||
                           festivalDateInfo.date.match(/(Nov|Oct|Aug|Sep)\s+(\d{1,2})\s*[-–—]\s*(\d{1,2}),?\s+(202\d)/i) ||
                           festivalDateInfo.date.match(/(\d{1,2})\s*[-–—]\s*(\d{1,2})\s+(November|October|August|September),?\s+(202\d)/i);

        let startDate, endDate;

        if (dateMatch) {
          // We have a full date range match
          const dateInfo = this.parseDateRange(festivalDateInfo.date);
          startDate = dateInfo.startDate;
          endDate = dateInfo.endDate;
        } else {
          // Look for just a year
          const yearMatch = festivalDateInfo.date.match(/(202\d)/i);

          if (yearMatch) {
            const year = parseInt(yearMatch[1]);

            // VAFF is typically held in November, so use estimated dates
            startDate = new Date(year, 10, 1); // November 1
            endDate = new Date(year, 10, 10, 23, 59, 59); // November 10
          }
        }

        // Create main festival event if we have dates
        if (startDate && endDate) {
          const eventId = this.generateEventId('VAFF', startDate);

          const festivalEvent = this.createEventObject(
            eventId,
            festivalDateInfo.title || `Vancouver Asian Film Festival ${startDate.getFullYear()}`,
            festivalDateInfo.description || `The Vancouver Asian Film Festival (VAFF) is an annual film festival held in Vancouver, Canada that showcases films and videos by North American Asian filmmakers. The festival typically features screenings, panels, workshops and more.`,
            startDate,
            endDate,
            festivalDateInfo.imageUrl || '',
            this.url
          );

          events.push(festivalEvent);
        }
      }

      // Check for events section or links
      console.log('Looking for event elements...');

      // Extract events from the main page
      const mainPageEvents = await page.evaluate(() => {
        const events = [];

        // Look for event containers with various selectors
        const eventContainers = Array.from(document.querySelectorAll(', s, -item, article, .post, .card, .upcoming-events li, s-list li, .wp-block-column'));

        eventContainers.forEach(container => {
          const title = container.querySelector('h2, h3, h4, h5, .title, -title')?.textContent.trim() || '';
          if (!title || title.length < 3) return;

          const description = container.querySelector('p, .description, .excerpt, .content')?.textContent.trim() || '';
          const dateText = container.querySelector('.date, -date, time, .datetime')?.textContent.trim() || '';
          const imageUrl = container.querySelector('img')?.src || '';
          const linkElement = container.querySelector('a[href]');
          const link = linkElement ? new URL(linkElement.href, window.location.href).href : '';

          // Only add if we have a title and some other information
          if (title && (dateText || description)) {
            events.push({
              title,
              description,
              dateText,
              imageUrl,
              link
            });
          }
        });

        return events;
      });

      // Process each main page event
      for (const eventData of mainPageEvents) {
        const { title, description, dateText, imageUrl, link } = eventData;

        // Parse date information
        const dateInfo = this.parseDateRange(dateText);

        // Skip events with no dates if we want only properly dated events
        if (!dateInfo.startDate && !dateInfo.endDate) {
          continue; // Skip if we couldn't find any date information
        }

        // Generate event ID and create event object
        const eventId = this.generateEventId(title, dateInfo.startDate);

        const event = this.createEventObject(
          eventId,
          title,
          description,
          dateInfo.startDate,
          dateInfo.endDate,
          imageUrl,
          link || this.url
        );

        events.push(event);
      }

      // If we found no events from main page, try to visit potential events pages
      if (events.length === 0) {
        const eventPages = [
          '/events/',
          '/whats-on/',
          '/festival/',
          '/program/',
          '/schedule/',
          '/about/',
          '/films/',
        ];

        for (const eventPage of eventPages) {
          const eventPageUrl = new URL(eventPage, this.url).href;
          console.log(`Checking potential events page: ${eventPageUrl}`);

          try {
            await page.goto(eventPageUrl, { waitUntil: 'networkidle2', timeout: 30000 });

            // Extract events from this page
            const pageEvents = await page.evaluate(() => {
              const events = [];

              // Look for event elements
              const eventElements = Array.from(document.querySelectorAll(', article, .post, .card, -item, .festival-item, .wp-block-column'));

              eventElements.forEach(el => {
                const title = el.querySelector('h2, h3, h4, h5, .title, -title')?.textContent.trim() || '';
                if (!title || title.length < 3) return;

                const description = el.querySelector('p, .description, .excerpt')?.textContent.trim() || '';
                const dateText = el.querySelector('.date, time, .datetime, -date')?.textContent.trim() || '';
                const imageUrl = el.querySelector('img')?.src || '';
                const linkEl = el.querySelector('a[href]');
                const link = linkEl ? new URL(linkEl.href, window.location.href).href : '';

                if (title) {
                  events.push({
                    title,
                    description,
                    dateText,
                    imageUrl,
                    link
                  });
                }
              });

              return events;
            });

            // Process each event from this page
            for (const eventData of pageEvents) {
              const dateInfo = this.parseDateRange(eventData.dateText);

              // Skip events with no dates
              if (!dateInfo.startDate && !dateInfo.endDate) continue;

              // Create event object
              const eventId = this.generateEventId(eventData.title, dateInfo.startDate);

              const event = this.createEventObject(
                eventId,
                eventData.title,
                eventData.description,
                dateInfo.startDate,
                dateInfo.endDate,
                eventData.imageUrl,
                eventData.link || eventPageUrl
              );

              events.push(event);
            }

            // If we found events on this page, no need to check others
            if (events.length > 0) {
              break;
            }
          } catch (error) {
            console.log(`Error accessing ${eventPageUrl}: ${error.message}`);
            continue;
          }
        }
      }

      // If we still don't have any events, create a  for the upcoming festival
      if (events.length === 0) {
        // VAFF is typically held in November
        const now = new Date();
        const currentYear = now.getFullYear();
        const festivalYear = now.getMonth() >= 10 ? currentYear + 1 : currentYear; // If past November, use next year

        const startDate = new Date(festivalYear, 10, 1); // November 1
        const endDate = new Date(festivalYear, 10, 10, 23, 59, 59); // November 10

        const eventId = this.generateEventId(`VAFF ${festivalYear}`, startDate);

        const festivalEvent = this.createEventObject(
          eventId,
          `Vancouver Asian Film Festival ${festivalYear}`,
          `The Vancouver Asian Film Festival (VAFF) is an annual film festival that showcases works by North American Asian filmmakers. The festival typically features film screenings, panels, workshops, and networking events celebrating Asian diaspora cinema.`,
          startDate,
          endDate,
          '', // No image URL
          this.url
        );

        events.push(festivalEvent);
      }

      console.log(`Found ${events.length} events from ${this.name}`);

    } catch (error) {
      console.error(`Error scraping ${this.name}: ${error.message}`);

      // If there was an error and no events were found, create a
      if (events.length === 0) {
        // VAFF is typically held in November
        const now = new Date();
        const currentYear = now.getFullYear();
        const festivalYear = now.getMonth() >= 10 ? currentYear + 1 : currentYear; // If past November, use next year

        const startDate = new Date(festivalYear, 10, 1); // November 1
        const endDate = new Date(festivalYear, 10, 10, 23, 59, 59); // November 10

        const eventId = this.generateEventId(`VAFF ${festivalYear}`, startDate);

        const festivalEvent = this.createEventObject(
          eventId,
          `Vancouver Asian Film Festival ${festivalYear}`,
          `The Vancouver Asian Film Festival (VAFF) is an annual film festival that showcases works by North American Asian filmmakers. The festival typically features film screenings, panels, workshops, and networking events celebrating Asian diaspora cinema.`,
          startDate,
          endDate,
          '', // No image URL
          this.url
        );

        events.push(festivalEvent);
        console.log(`Added  for VAFF ${festivalYear}`);
      }
    } finally {
      if (browser) {
        await browser.close();
      }
    }

    return events;
  }
}

module.exports = new VancouverAsianFilmFestivalEvents();

// Function export for compatibility with runner/validator
module.exports = async (city) => {
  const scraper = new VancouverAsianFilmFestivalEvents();
  return await scraper.scrape(city);
};

// Also export the class for backward compatibility
module.exports.VancouverAsianFilmFestivalEvents = VancouverAsianFilmFestivalEvents;
