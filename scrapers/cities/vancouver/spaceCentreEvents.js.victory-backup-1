const { getCityFromArgs } = require('../../utils/city-util.js');

  cleanHtmlContent(htmlContent) {
    if (!htmlContent) return '';

    // Remove HTML tags
    let text = htmlContent.replace(/<[^>]*>/g, ' ');

    // Replace multiple spaces, newlines with single space
    text = text.replace(/\s+/g, ' ');

    // Decode HTML entities
    text = text.replace(/&amp;/g, '&')
               .replace(/&lt;/g, '<')
               .replace(/&gt;/g, '>')
               .replace(/&quot;/g, '"')
               .replace(/&#039;/g, "'");

    return text.trim();
  },

  /**
   * Main scraping function
   * @returns {Promise<Array>} - Array of event objects
   */
  async scrape() {
    if (!this.enabled) {
      console.log(`${this.name} scraper is disabled`);
      return [];
    }

    console.log(`🔍 Scraping events from ${this.name}...`);
    const events = [];
    let browser;

    try {
      browser = await puppeteer.launch({
        headless: 'new',
        args: ['--no-sandbox', '--disable-setuid-sandbox']
      });

      const page = await browser.newPage();
      await page.setViewport({ width: 1280, height: 800 });
      await page.setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36');

      // Use shorter timeout
      page.setDefaultNavigationTimeout(15000);

      console.log(`Navigating to ${this.url}`);
      await page.goto(this.url, { waitUntil: 'networkidle2', timeout: 15000 });

      // Wait for events to load
      try {
        await page.waitForSelector(', -item, .tribe-events-list-event-title, article.type-event', { timeout: 8000 });
      } catch (error) {
        console.log('Could not find event elements with standard selectors, trying to proceed anyway');
      }

      // Extract events data
      const eventsData = await page.evaluate(() => {
        const events = [];

        // Try different selectors for events (Space Centre likely uses The Events Calendar plugin)
        const eventElements = Array.from(document.querySelectorAll(
          ', -item, article.type-event, .tribe-events-list-event, .elementor-post'
        ));

        eventElements.forEach(element => {
          // Try to extract title
          let title = '';
          const titleElement = element.querySelector('-title, h2, h3, .tribe-events-list-event-title, .elementor-post__title');
          if (titleElement) {
            title = titleElement.textContent.trim();
          }

          if (!title) return;

          // Try to extract description
          let description = '';
          const descElement = element.querySelector('-description, .description, .tribe-events-list-event-description, .elementor-post__excerpt');
          if (descElement) {
            description = descElement.textContent.trim();
          }

          // Try to extract date
          let dateText = '';
          const dateElement = element.querySelector('-date, .date, .tribe-event-date-start, .elementor-post-date');
          if (dateElement) {
            dateText = dateElement.textContent.trim();
          }

          // For events with separate start and end date elements
          const startDateElement = element.querySelector('.tribe-event-date-start');
          const endDateElement = element.querySelector('.tribe-event-date-end');
          if (startDateElement && endDateElement) {
            dateText = `${startDateElement.textContent.trim()} to ${endDateElement.textContent.trim()}`;
          }

          // Try to extract image URL
          let imageUrl = '';
          const imgElement = element.querySelector('img');
          if (imgElement && imgElement.src) {
            imageUrl = imgElement.src;
          }

          // Try to extract link URL
          let sourceUrl = '';
          const linkElement = element.querySelector('a');
          if (linkElement && linkElement.href) {
            sourceUrl = linkElement.href;
          }

          events.push({
            title,
            description,
            dateText,
            imageUrl,
            sourceUrl
          });
        });

        return events;
      });

      console.log(`Found ${eventsData.length} potential events`);

      // Process each event data
      for (const eventData of eventsData) {
        // Parse date information
        const dateInfo = this.parseDateRange(eventData.dateText);

        // Skip events with no valid dates
        if (!dateInfo.startDate || !dateInfo.endDate) {
          console.log(`Skipping event "${eventData.title}" due to invalid date: "${eventData.dateText}"`);
          continue;
        }

        // Generate event ID
        const eventId = this.generateEventId(eventData.title, dateInfo.startDate);

        // Create event object
        const event = this.createEventObject(
          eventId,
          eventData.title,
          eventData.description,
          dateInfo.startDate,
          dateInfo.endDate,
          eventData.imageUrl,
          eventData.sourceUrl
        );

        // Add event to events array
        events.push(event);
      }

      // If no events found with list view, try to look for individual featured events
      if (events.length === 0) {
        console.log('No events found with primary selectors, trying alternative approach...');

        // Try to extract featured events or any event-like sections
        const featuredEventsData = await page.evaluate(() => {
          const events = [];

          // Look for featured events or prominent content blocks
          const featuredElements = Array.from(document.querySelectorAll(
            '.featured-event, .elementor-widget, section, .main-content > div'
          ));

          featuredElements.forEach(element => {
            // Skip elements that are too small or likely not event containers
            if (element.offsetHeight < 100) return;

            // Try to extract title
            let title = '';
            const titleElement = element.querySelector('h1, h2, h3, h4, .title');
            if (titleElement) {
              title = titleElement.textContent.trim();
              if (!title || title.toLowerCase().includes('subscribe') || title.toLowerCase().includes('newsletter')) {
                return; // Skip non-events or subscription blocks
              }
            } else {
              return; // No title, likely not an event
            }

            // Try to extract description
            let description = '';
            const paragraphs = element.querySelectorAll('p');
            if (paragraphs.length > 0) {
              // Combine up to 3 paragraphs for description
              const descTexts = Array.from(paragraphs).slice(0, 3).map(p => p.textContent.trim());
              description = descTexts.join(' ');
            }

            // Try to extract date
            let dateText = '';
            // Look for date patterns in text
            const allText = element.textContent;

            // Common date formats
            const datePatterns = [
              /(?:January|February|March|April|May|June|July|August|September|October|November|December)\s+\d{1,2},?\s+\d{4}/i,
              /\d{1,2}\/\d{1,2}\/\d{4}/,
              /\d{1,2}-\d{1,2}-\d{4}/
            ];

            for (const pattern of datePatterns) {
              const match = allText.match(pattern);
              if (match) {
                dateText = match[0];
                break;
              }
            }

            // Try to extract image URL
            let imageUrl = '';
            const imgElement = element.querySelector('img');
            if (imgElement && imgElement.src) {
              imageUrl = imgElement.src;
            }

            // Try to extract link URL
            let sourceUrl = '';
            const linkElement = element.querySelector('a');
            if (linkElement && linkElement.href) {
              sourceUrl = linkElement.href;
            }

            if (title && dateText) {
              events.push({
                title,
                description,
                dateText,
                imageUrl,
                sourceUrl
              });
            }
          });

          return events;
        });

        console.log(`Found ${featuredEventsData.length} potential featured events`);

        // Process each featured event
        for (const eventData of featuredEventsData) {
          // Parse date information
          const dateInfo = this.parseDateRange(eventData.dateText);

          // Skip events with no valid dates
          if (!dateInfo.startDate || !dateInfo.endDate) {
            console.log(`Skipping featured event "${eventData.title}" due to invalid date: "${eventData.dateText}"`);
            continue;
          }

          // Generate event ID
          const eventId = this.generateEventId(eventData.title, dateInfo.startDate);

          // Create event object
          const event = this.createEventObject(
            eventId,
            eventData.title,
            eventData.description,
            dateInfo.startDate,
            dateInfo.endDate,
            eventData.imageUrl,
            eventData.sourceUrl
          );

          // Add event to events array
          events.push(event);
        }
      }

      console.log(`Found ${events.length} events from ${this.name}`);

    } catch (error) {
      console.error(`Error scraping ${this.name}: ${error.message}`);
    } finally {
      if (browser) {
        await browser.close();
      }
    }

    return events;
  }
};

module.exports = SpaceCentreEvents;
