const { getCityFromArgs } = require('../../utils/city-util.js');

  async scrape() {
    if (!this.enabled) {
      console.log(`${this.name} scraper is disabled`);
      return [];
    }

    console.log(`🔍 Scraping events from ${this.name}...`);
    const events = [];
    let browser;

    try {
      browser = await puppeteer.launch({
        headless: 'new',
        args: ['--no-sandbox', '--disable-setuid-sandbox']
      });

      const page = await browser.newPage();
      await page.setViewport({ width: 1280, height: 800 });
      await page.setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36');

      // Use shorter timeout
      page.setDefaultNavigationTimeout(15000);

      console.log(`Navigating to ${this.url}`);
      await page.goto(this.url, { waitUntil: 'networkidle2', timeout: 15000 });

      try {
        await page.waitForSelector(', -card, article, -item', { timeout: 8000 });
      } catch (error) {
        console.log('Could not find event elements with standard selectors, trying to proceed anyway');
      }

      // Extract events data
      const eventsData = await page.evaluate(() => {
        const events = [];

        // Try different selectors for events
        const eventElements = Array.from(document.querySelectorAll(
          ', -card, article, -item, s-list-item'
        ));

        eventElements.forEach(element => {
          const title = element.querySelector('h2, h3, h4, .title, -title')?.textContent.trim() || '';
          if (!title) return;

          const description = element.querySelector('p, .description, .excerpt, .summary')?.textContent.trim() || '';
          const dateText = element.querySelector('.date, time, -date')?.textContent.trim() || '';
          const imageUrl = element.querySelector('img')?.src || '';
          const sourceUrl = element.querySelector('a[href]')?.href || '';

          // Try to extract category
          let category = '';
          const categoryElement = element.querySelector('.category, -type, -category');
          if (categoryElement) {
            category = categoryElement.textContent.trim();
          } else {
            // Try to infer category from class names
            const classes = element.className.split(' ');
            const categoryClasses = classes.filter(cls =>
              cls.includes('category-') ||
              cls.includes('type-') ||
              cls.includes('event-type-')
            );

            if (categoryClasses.length > 0) {
              category = categoryClasses[0].replace(/category-|type-|event-type-/g, '');
            }
          }

          events.push({
            title,
            description,
            dateText,
            imageUrl,
            sourceUrl,
            category
          });
        });

        return events;
      });

      console.log(`Found ${eventsData.length} potential events`);

      // If no events found on events page, check for the main PNE Fair dates
      if (eventsData.length === 0) {
        console.log('No events found on events page, checking homepage for PNE Fair dates');

        await page.goto('https://www.pne.ca/', { waitUntil: 'networkidle2', timeout: 15000 });

        const pneFairData = await page.evaluate(() => {
          // Look for PNE Fair date information
          const datePattern = /(?:august|september)\s+\d{1,2}[-–]\d{1,2},?\s*\d{4}/i;
          const fullText = document.body.textContent;

          const dateMatch = fullText.match(datePattern);
          const dateText = dateMatch ? dateMatch[0] : '';

          // Look for a description
          const description = document.querySelector('p')?.textContent.trim() || 'The annual PNE Fair - Vancouver\'s favorite end-of-summer tradition';

          // Look for an image
          const imageUrl = document.querySelector('.hero img, .banner img')?.src ||
                           document.querySelector('img')?.src || '';

          return {
            title: 'PNE Fair',
            description,
            dateText,
            imageUrl,
            sourceUrl: 'https://www.pne.ca/fair/',
            category: 'fair'
          };
        });

        if (pneFairData.dateText) {
          console.log(`Found PNE Fair date: ${pneFairData.dateText}`);
          eventsData.push(pneFairData);
        } else {
          // If no specific date found, create a default entry for August fair
          const currentYear = new Date().getFullYear();
          eventsData.push({
            title: 'PNE Fair',
            description: 'The annual PNE Fair - Vancouver\'s favorite end-of-summer tradition',
            dateText: `August 17 - September 2, ${currentYear}`,
            imageUrl: '',
            sourceUrl: 'https://www.pne.ca/fair/',
            category: 'fair'
          });
        }
      }

      // Process each event data
      for (const eventData of eventsData) {
        // Parse date information
        const dateInfo = this.parseDateRange(eventData.dateText);

        // Skip events with no valid dates
        if (!dateInfo.startDate || !dateInfo.endDate) {
          console.log(`Skipping event "${eventData.title}" due to invalid date: "${eventData.dateText}"`);
          continue;
        }

        // Generate event ID
        const eventId = this.generateEventId(eventData.title, dateInfo.startDate);

        // Create event object
        const event = this.createEventObject(
          eventId,
          eventData.title,
          eventData.description,
          dateInfo.startDate,
          dateInfo.endDate,
          eventData.imageUrl,
          eventData.sourceUrl,
          eventData.category
        );

        // Add event to events array
        events.push(event);
      }

      console.log(`Found ${events.length} events from ${this.name}`);

    } catch (error) {
      console.error(`Error scraping ${this.name}: ${error.message}`);
    } finally {
      if (browser) {
        await browser.close();
      }
    }

    return events;
  }
};

module.exports = PNEEvents;


// Function export wrapper added by targeted fixer
module.exports = async (city) => {
    const scraper = new names();
    if (typeof scraper.scrape === 'function') {
        return await scraper.scrape(city);
    } else {
        throw new Error('No scrape method found in names');
    }
};